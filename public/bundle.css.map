{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\GraphSwitcher\\GraphSwitcher.svelte",
    "..\\src\\GraphSwitcher\\UserMetroGraph.svelte",
    "..\\src\\render\\ResultRender.svelte",
    "..\\src\\pathCalculate\\PathCalculate.svelte",
    "..\\src\\pathCalculate\\ResultGrid.svelte",
    "..\\src\\pathCalculate\\MatrixRender.svelte",
    "..\\src\\render\\SchemeRender.svelte",
    "..\\src\\stopWatch\\StopWatchSVG.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import PathCalculate from \"./pathCalculate/PathCalculate.svelte\";\r\n  import ResultRender from \"./render/ResultRender.svelte\";\r\n  import GraphSwitcher from \"./GraphSwitcher/GraphSwitcher.svelte\";\r\n  import UserMetroGraph from \"./GraphSwitcher/UserMetroGraph.svelte\";\r\n  import { getGraph, getStations, getScheme, getData } from \"./graphSwitcher/getData\";\r\n\r\n  let graphUrl, stationsUrl, schemeUrl;\r\n  let selectedMetro, timeOnStation, metroImage;\r\n  let schemeSVGData, bestPath, stations, graph, stationsBetween, dis;\r\n  let isCalculateShowed = false;\r\n  let isCustomShowed = false;\r\n\r\n  function onSelectMetro(e) {\r\n    selectedMetro = e.detail.result;\r\n    graphUrl = e.detail.graphUrl;\r\n    stationsUrl = e.detail.stationsUrl;\r\n    schemeUrl = e.detail.schemeUrl;\r\n    timeOnStation = e.detail.timeOnStation;\r\n    metroImage = e.detail.metroImage;\r\n\r\n    resetData();\r\n\r\n    if (!graphUrl && !stationsUrl) {\r\n      return (isCustomShowed = true);\r\n    }\r\n    setData(); \r\n    return (isCustomShowed = false);\r\n  }\r\n\r\n  function getResult(e) {\r\n    bestPath = e.detail.result;\r\n  }\r\n\r\n  function resetData() {\r\n    bestPath = null;\r\n    stations = null;\r\n    schemeSVGData = null;\r\n    isCalculateShowed = false;\r\n  }\r\n\r\n  async function onGetUserGraph(e) {\r\n    graphUrl = e.detail.graphUrl;\r\n    stationsUrl = e.detail.stationsUrl;\r\n    setData();\r\n  }\r\n\r\n  function getUniqueId(value = '') {\r\n    return `${selectedMetro}-${timeOnStation}-${value}`;\r\n  }\r\n\r\n  async function setGraph(url) {\r\n    const graphData = await getData(\r\n      getUniqueId('graphData'),\r\n      () => getGraph(url, timeOnStation)\r\n    );\r\n    graph = graphData.graph;\r\n    stationsBetween = graphData.stationsBetween;\r\n    dis = graphData.distances;\r\n  }\r\n  async function setStations(url) {\r\n    const stationsData = await getData(\r\n      getUniqueId('stations'),\r\n      () => getStations(url)\r\n    );\r\n    stations = stationsData;\r\n  }\r\n  async function setScheme(url) {\r\n    const schemeData = await getData(\r\n      getUniqueId('scheme'),\r\n      () => getScheme(url)\r\n    );\r\n    schemeSVGData = schemeData;\r\n  }\r\n  async function setData() {\r\n    if (graphUrl) await setGraph(graphUrl);\r\n    isCalculateShowed = true;\r\n\r\n    if (stationsUrl) await setStations(stationsUrl);\r\n    if (schemeUrl) await setScheme(schemeUrl);\r\n  }\r\n</script>\r\n\r\n<style global lang=\"scss\">:global(*), :global(*:before), :global(*:after) {\n  box-sizing: border-box; }\n\n:global(:root) {\n  --border-width: -1px;\n  --radius: 7px; }\n\n:global(html), :global(body) {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: #fff; }\n\n:global(html) {\n  display: flex; }\n\n:global(body) {\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  color: #2e3440;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: Tahoma, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif; }\n\n:global(header),\n:global(footer) {\n  flex-shrink: 0; }\n\n:global(main) {\n  flex-grow: 1; }\n\n:global(a) {\n  color: inherit;\n  text-decoration: none; }\n\n:global(h1), :global(h2), :global(h3), :global(h4), :global(h5), :global(h6), :global(p) {\n  margin: 0; }\n\n:global(ul), :global(ol), :global(li) {\n  padding: 0;\n  margin: 0;\n  list-style: none; }\n\n:global(main) {\n  display: block;\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin-bottom: 40px; }\n  @media (min-width: 600px) {\n    :global(main) {\n      padding-left: 20px;\n      padding-right: 20px;\n      max-width: 900px; } }\n\n:global(header) {\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 10px;\n  padding-right: 10px;\n  display: block;\n  margin-top: 20px;\n  margin-bottom: 40px; }\n  @media (min-width: 600px) {\n    :global(header) {\n      padding-left: 20px;\n      padding-right: 20px;\n      max-width: 900px; } }\n\n:global(footer) {\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 10px;\n  padding-right: 10px;\n  display: block;\n  margin-top: 60px;\n  margin-bottom: 40px;\n  font-size: 12px; }\n  @media (min-width: 600px) {\n    :global(footer) {\n      padding-left: 20px;\n      padding-right: 20px;\n      max-width: 900px; } }\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAuc3ZlbHRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usc0JBQXNCLEVBQUU7O0FBRTFCO0VBQ0Usb0JBQW9CO0VBQ3BCLGFBQWEsRUFBRTs7QUFFakI7RUFDRSxrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFlBQVk7RUFDWixnQkFBZ0IsRUFBRTs7QUFFcEI7RUFDRSxhQUFhLEVBQUU7O0FBRWpCO0VBQ0UsaUJBQWlCO0VBQ2pCLFdBQVc7RUFDWCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGNBQWM7RUFDZCxTQUFTO0VBQ1QsVUFBVTtFQUNWLHNCQUFzQjtFQUN0Qix3SUFBd0ksRUFBRTs7QUFFNUk7O0VBRUUsY0FBYyxFQUFFOztBQUVsQjtFQUNFLFlBQVksRUFBRTs7QUFFaEI7RUFDRSxjQUFjO0VBQ2QscUJBQXFCLEVBQUU7O0FBRXpCO0VBQ0UsU0FBUyxFQUFFOztBQUViO0VBQ0UsVUFBVTtFQUNWLFNBQVM7RUFDVCxnQkFBZ0IsRUFBRTs7QUFFcEI7RUFDRSxjQUFjO0VBQ2QsV0FBVztFQUNYLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsa0JBQWtCO0VBQ2xCLG1CQUFtQjtFQUNuQixtQkFBbUIsRUFBRTtFQUNyQjtJQUNFO01BQ0Usa0JBQWtCO01BQ2xCLG1CQUFtQjtNQUNuQixnQkFBZ0IsRUFBRSxFQUFFOztBQUUxQjtFQUNFLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixtQkFBbUIsRUFBRTtFQUNyQjtJQUNFO01BQ0Usa0JBQWtCO01BQ2xCLG1CQUFtQjtNQUNuQixnQkFBZ0IsRUFBRSxFQUFFOztBQUUxQjtFQUNFLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsZUFBZSxFQUFFO0VBQ2pCO0lBQ0U7TUFDRSxrQkFBa0I7TUFDbEIsbUJBQW1CO01BQ25CLGdCQUFnQixFQUFFLEVBQUUiLCJmaWxlIjoic3JjL0FwcC5zdmVsdGUiLCJzb3VyY2VzQ29udGVudCI6WyIqLCAqOmJlZm9yZSwgKjphZnRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cblxuOnJvb3Qge1xuICAtLWJvcmRlci13aWR0aDogLTFweDtcbiAgLS1yYWRpdXM6IDdweDsgfVxuXG5odG1sLCBib2R5IHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kOiAjZmZmOyB9XG5cbmh0bWwge1xuICBkaXNwbGF5OiBmbGV4OyB9XG5cbmJvZHkge1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgd2lkdGg6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGNvbG9yOiAjMmUzNDQwO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGZvbnQtZmFtaWx5OiBUYWhvbWEsIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgXCJTZWdvZSBVSVwiLCBSb2JvdG8sIE94eWdlbi1TYW5zLCBVYnVudHUsIENhbnRhcmVsbCwgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBzYW5zLXNlcmlmOyB9XG5cbmhlYWRlcixcbmZvb3RlciB7XG4gIGZsZXgtc2hyaW5rOiAwOyB9XG5cbm1haW4ge1xuICBmbGV4LWdyb3c6IDE7IH1cblxuYSB7XG4gIGNvbG9yOiBpbmhlcml0O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCB7XG4gIG1hcmdpbjogMDsgfVxuXG51bCwgb2wsIGxpIHtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbm1haW4ge1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIHBhZGRpbmctbGVmdDogMTBweDtcbiAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgbWFyZ2luLWJvdHRvbTogNDBweDsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNjAwcHgpIHtcbiAgICBtYWluIHtcbiAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDIwcHg7XG4gICAgICBtYXgtd2lkdGg6IDkwMHB4OyB9IH1cblxuaGVhZGVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIHBhZGRpbmctbGVmdDogMTBweDtcbiAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIG1hcmdpbi1ib3R0b206IDQwcHg7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gICAgaGVhZGVyIHtcbiAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDIwcHg7XG4gICAgICBtYXgtd2lkdGg6IDkwMHB4OyB9IH1cblxuZm9vdGVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gIHBhZGRpbmctbGVmdDogMTBweDtcbiAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi10b3A6IDYwcHg7XG4gIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gIGZvbnQtc2l6ZTogMTJweDsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNjAwcHgpIHtcbiAgICBmb290ZXIge1xuICAgICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICAgICAgcGFkZGluZy1yaWdodDogMjBweDtcbiAgICAgIG1heC13aWR0aDogOTAwcHg7IH0gfVxuXG4vKiMgc291cmNlTWFwcGluZ1VSTD1BcHAuc3ZlbHRlLmNzcy5tYXAgKi8iXX0= */</style>  \r\n \r\n<header>\r\n  <h1>Transit challenge solver</h1>\r\n  <p>For Kharkiv and other metropolitens</p>\r\n</header>\r\n\r\n<main>\r\n  <GraphSwitcher on:onSelectMetro={onSelectMetro} />\r\n\r\n  {#if isCustomShowed}\r\n    <UserMetroGraph on:onSubmitGraph={onGetUserGraph} />\r\n  {/if}\r\n\r\n  {#if graph && stationsBetween && dis && isCalculateShowed}\r\n    <PathCalculate\r\n      {graph}\r\n      {stationsBetween}\r\n      {dis}\r\n      {metroImage}\r\n      id={getUniqueId()}\r\n      on:getResult={getResult} />\r\n  {/if}  \r\n\r\n  {#if bestPath}\r\n    <ResultRender path={bestPath} {stationsBetween} {stations} {metroImage} {schemeSVGData}/>\r\n  {/if} \r\n</main>\r\n \r\n<footer>\r\n  <p>Taras Gordienko, 2019</p>\r\n</footer>\r\n",
    "<script>\r\n  import { onMount } from 'svelte';\r\n  import { createEventDispatcher } from \"svelte\";\r\n  import schemes from './_schemes';\r\n  const dispatch = createEventDispatcher();\r\n\r\n  let selectedMetro, timeOnStation;\r\n\r\n  function onChange() {\r\n    const currentScheme = schemes.find(item => item.id === selectedMetro);\r\n\r\n    dispatch(\"onSelectMetro\", {\r\n      result: selectedMetro,\r\n      timeOnStation: timeOnStation,\r\n      graphUrl: currentScheme && currentScheme.graphUrl,\r\n      stationsUrl: currentScheme && currentScheme.stationsUrl,\r\n      schemeUrl: currentScheme && currentScheme.schemeUrl,\r\n      metroImage: currentScheme.image\r\n    });\r\n  } \r\n\r\n  onMount(() => {\r\n    selectedMetro = schemes && schemes.length && schemes[0].id;\r\n    timeOnStation = 5;\r\n    onChange();\r\n\t}); \r\n</script>\r\n\r\n<style lang=\"scss\">.graph-wsitcher {\n  display: flex;\n  align-items: center;\n  margin-bottom: 40px; }\n\n.input-number {\n  padding: 8px 10px;\n  border: 1px solid #eceff4;\n  font-size: 16px;\n  border-radius: 4px;\n  width: 100%;\n  margin-right: 8px;\n  width: 140px; }\n\n.text-field {\n  display: inline-flex;\n  flex-direction: column;\n  font-size: 12px;\n  margin-left: 20px; }\n  .text-field span {\n    margin-bottom: 5px; }\n\n.radio-input {\n  margin-right: 20px; }\n  .radio-input section {\n    display: block;\n    border: 1px solid #eceff4;\n    background: #fff;\n    border-radius: 10px;\n    padding: 10px;\n    transition: 0.2s; }\n    .radio-input section:hover {\n      cursor: pointer;\n      background: #eceff4; }\n    .radio-input section img {\n      width: 100px;\n      height: 100px;\n      object-fit: cover;\n      border-radius: 10px;\n      margin-bottom: 8px; }\n    .radio-input section h3 {\n      font-size: 14px;\n      text-align: center;\n      font-weight: 400; }\n  .radio-input__input {\n    display: none; }\n    .radio-input__input:checked + section {\n      background: #e5e9f0; }\n      .radio-input__input:checked + section:hover {\n        cursor: default;\n        border-color: #e5e9f0; }\n\n/*# sourceMappingURL=GraphSwitcher.svelte.css.map */</style> \r\n\r\n<section class=\"graph-wsitcher\">\r\n  \r\n  {#each schemes as { id, name, image }}\r\n    <label class=\"radio-input\">\r\n      <input class=\"radio-input__input\" type='radio' bind:group={selectedMetro} on:change={onChange} value={id}>\r\n      <section>\r\n        <img alt={name} src={image}/>\r\n        <h3>{name}</h3>\r\n      </section>\r\n    </label>\r\n  {/each} \r\n\r\n  <label class=\"text-field\">\r\n    <span>Station stay time, min</span>\r\n    <input class=\"input-number\" bind:value={timeOnStation} type=\"number\" on:change={onChange} min=\"0\" max=\"10\"/>\r\n  </label>\r\n\r\n</section>\r\n",
    "<script>\r\n  import { createEventDispatcher } from \"svelte\";\r\n  const dispatch = createEventDispatcher();\r\n\r\n  let jsonUrl;\r\n\r\n  function onSubmit() {\r\n    dispatch(\"onSubmitGraph\", {\r\n      graphUrl: jsonUrl\r\n    });\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\">section {\n  margin-bottom: 30px;\n  display: flex; }\n  section input {\n    padding: 8px 10px;\n    border: 1px solid #bbb;\n    font-size: 16px;\n    border-radius: 4px;\n    width: 100%;\n    margin-right: 8px; }\n  section button {\n    border: 0;\n    padding: 8px 20px;\n    font-size: 14px;\n    color: #fff;\n    border-radius: var(--radius);\n    background-color: #81a1c1;\n    outline: 0; }\n\n/*# sourceMappingURL=UserMetroGraph.svelte.css.map */</style> \r\n\r\n<section>\r\n  <input bind:value={jsonUrl} type=\"text\"/>\r\n  <button on:click={onSubmit}>Send</button>\r\n</section> ",
    "<script>\r\n  import { fly } from \"svelte/transition\";\r\n  import SchemeRender from \"./SchemeRender.svelte\";\r\n\r\n  export let stationsBetween, path, stations, metroImage, schemeSVGData;\r\n\r\n  let resultPath = [];\r\n  let stationsPath = [];\r\n\r\n  $: stationsPath = calculatePath({ path, stationsBetween });\r\n\r\n  function getResultPath({ path = [], stationsBetween }) {\r\n    let resultPath = new Array(path.length);\r\n    let resultWeight = [];\r\n    let counter = 0;\r\n\r\n    for (let i = 1; i < path.length; i++) {\r\n      const firstIndex = path[i - 1];\r\n      const secondIndex = path[i];\r\n      const currentGap = stationsBetween[firstIndex][secondIndex];\r\n      counter += currentGap.length - 1;\r\n\r\n      resultPath[i] = {\r\n        stations: currentGap.slice(1),\r\n        weight: currentGap.weight,\r\n        counter\r\n      };\r\n    }\r\n\r\n    resultPath[0] = {\r\n      stations: [path[0].toString()],\r\n      weight: 0,\r\n      counter: 0\r\n    };\r\n\r\n    return resultPath;\r\n  }\r\n\r\n  function calculatePath({ path = [], stationsBetween }) {\r\n    let newStationsPath = [];\r\n\r\n    resultPath = getResultPath({ path, stationsBetween });\r\n\r\n    if (stations) {\r\n      resultPath.map(gap => {\r\n        gap.stations.map(item => {\r\n          newStationsPath.push(stations.find(station => station.id == item));\r\n        });\r\n      });\r\n    }\r\n\r\n    return newStationsPath;\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\">@charset \"UTF-8\";\nh3 {\n  margin-bottom: 10px; }\n\nsection {\n  display: block;\n  margin-bottom: 30px;\n  width: 100%; }\n\n.path-list-wrapper {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-bottom: 20px; }\n\n.path-list {\n  word-break: break-word;\n  display: flex; }\n  .path-list__part {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-right: 10px; }\n    .path-list__part:not(:last-child) .path-list__item:not(:last-child):after {\n      content: \"↓\"; }\n    .path-list__part:not(:last-child) .path-list__item:last-child:after {\n      content: \"→\"; }\n    .path-list__part:last-child {\n      align-items: center; }\n    .path-list__part:after {\n      content: \"\";\n      height: 24px;\n      width: 24px;\n      border-radius: 50%;\n      border: 1px solid #ccc;\n      padding: 2px;\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='rgba(0,0,0,0.75)' viewBox='0 0 150 190'%3E%3Cpath d='M95 100l-7-6V82l17 15c-1 4-6 6-10 3zM66 54c-1-11 17-13 17-1 0 13-15 12-17 1zm16 16l1 36 18 40c-2 2-8 4-10-1L65 99l-2-17-7 2-3 18s-8 1-8-5l2-20 17-11c12 0 18 4 18 4zm-20 35l8 14-15 29c-4 0-9-3-6-9l13-34z'/%3E%3C/svg%3E\");\n      background-repeat: no-repeat;\n      background-position: center center; }\n  .path-list__item {\n    display: flex;\n    white-space: nowrap;\n    justify-content: flex-end;\n    margin-bottom: 4px; }\n\n/*# sourceMappingURL=ResultRender.svelte.css.map */</style>\r\n\r\n{#if resultPath}\r\n  <section in:fly={{ y: 50, duration: 1000 }}>\r\n    <h3>Full best path</h3>\r\n\r\n    <div class=\"path-list-wrapper\">\r\n      <div class=\"path-list\">\r\n        {#each resultPath as gap, index}\r\n          <div class=\"path-list__part\">\r\n            {#each gap.stations as station, indexInside}\r\n              <span class=\"path-list__item\">{station}</span>\r\n            {/each}\r\n          </div>\r\n        {/each}\r\n      </div>\r\n    </div>\r\n  </section>\r\n{/if}\r\n\r\n{#if stationsPath && resultPath && stations}\r\n  <section in:fly={{ y: 50, duration: 1000 }}>\r\n    <h3>Path render</h3>\r\n    <SchemeRender {stations} {stationsPath} {resultPath} {metroImage} {schemeSVGData}/>\r\n  </section>\r\n{/if}\r\n",
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import { fly } from \"svelte/transition\";\r\n  import { onDestroy } from \"svelte\";\r\n  import ResultGrid from \"./ResultGrid.svelte\";\r\n  import MatrixRender from \"./MatrixRender.svelte\";\r\n  import { mutationCount, crossoverCount } from \"./store.js\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n  import { randomNumber } from \"../helpers/randomNumber\";\r\n  import { evaluate, randomIndivial, getCurrentBest } from \"./helper\";\r\n  import { selection, mutation, crossover } from \"./algorithm\";\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  // constants\r\n  let populationSize = 20;\r\n  let crossoverProbability = 0.9;\r\n  let intervalDuration = 80;\r\n\r\n  let mutationProps = {\r\n    mutationProbability: 0.1,\r\n    doMutateProbability: 0.1,\r\n    pushMutateProbability: 0.1,\r\n    reverseMutateProbability: 0.1\r\n  };\r\n\r\n  export let id;\r\n  export let graph, stationsBetween, dis;\r\n  export let metroImage;\r\n\r\n  let running = false;\r\n  let bestResultsFromStorage = [];\r\n  let mainInterval;\r\n\r\n  let currentGeneration = 0;\r\n  let bestValue = 0;\r\n  let bestValuesArray = [];\r\n  let best = [];\r\n  let currentBest = {\r\n    bestPosition: 0,\r\n    bestValue: []\r\n  };\r\n  let population = [];\r\n  let values = [];\r\n  let mutationsCount;\r\n  let crossoversCount;\r\n\r\n  const unsubscribeMutation = mutationCount.subscribe(\r\n    value => (mutationsCount = value)\r\n  );\r\n  const unsubscribeCrossover = crossoverCount.subscribe(\r\n    value => (crossoversCount = value)\r\n  );\r\n\r\n  onDestroy(() => {\r\n    clearInterval(mainInterval);\r\n  });\r\n\r\n  onMount(() => {\r\n    bestResultsFromStorage = JSON.parse(localStorage.getItem(id)) || [];\r\n  });\r\n\r\n  function onSave() {\r\n    bestResultsFromStorage = [\r\n      ...bestResultsFromStorage,\r\n      { bestValue, bestPath: best }\r\n    ];\r\n    localStorage.setItem(id, JSON.stringify(bestResultsFromStorage));\r\n  }\r\n\r\n  function onClear() {\r\n    localStorage.setItem(id, JSON.stringify(\"[]\"));\r\n    bestResultsFromStorage = [];\r\n  }\r\n\r\n  function onStart() {\r\n    if (!running) {\r\n      GAStart();\r\n      running = true;\r\n    }\r\n  }\r\n\r\n  function onStop() {\r\n    if (running) {\r\n      GAStop();\r\n      running = false;\r\n    }\r\n  }\r\n\r\n  function dispatchBestResult() {\r\n    dispatch(\"getResult\", {\r\n      result: best\r\n    });\r\n  }\r\n\r\n  function GAStop() {\r\n    clearInterval(mainInterval);\r\n    dispatchBestResult();\r\n  }\r\n\r\n  function GAStart() {\r\n    initData();\r\n    GAInitialize();\r\n    mainInterval = setInterval(render, intervalDuration);\r\n  }\r\n\r\n  function initData() {\r\n    currentGeneration = 0;\r\n    bestValue = undefined;\r\n    best = [];\r\n    bestValuesArray = [];\r\n    currentBest = 0;\r\n    population = [];\r\n    values = new Array(populationSize);\r\n    mutationCount.update(n => 0);\r\n    crossoverCount.update(n => 0);\r\n  }\r\n\r\n  function render() {\r\n    GANextGeneration();\r\n  }\r\n\r\n  function GAInitialize() {\r\n    const stationsCount = graph.nodes().length;\r\n    population = Array.apply(null, Array(populationSize)).map(item =>\r\n      randomIndivial(stationsCount)\r\n    );\r\n    setBestValue();\r\n  }\r\n\r\n  function GANextGeneration() {\r\n    currentGeneration++;\r\n    population = selection(\r\n      population,\r\n      currentBest,\r\n      best,\r\n      values,\r\n      populationSize\r\n    );\r\n    population = crossover(\r\n      population,\r\n      dis,\r\n      populationSize,\r\n      crossoverProbability\r\n    );\r\n    population = mutation(population, populationSize, mutationProps);\r\n    setBestValue();\r\n  }\r\n\r\n  function setBestValue() {\r\n    values = population.map(item => evaluate(item, dis));\r\n    currentBest = getCurrentBest(values);\r\n\r\n    if (bestValue === undefined || bestValue > currentBest.bestValue) {\r\n      best = population[currentBest.bestPosition].clone();\r\n      bestValue = currentBest.bestValue;\r\n      bestValuesArray = [...bestValuesArray, bestValue];\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\">.calculate-block-wrapper {\n  margin-bottom: 30px; }\n\n.calculate-block {\n  position: relative;\n  box-shadow: 0 14px 12px -6px #eceff4;\n  z-index: 1;\n  border-radius: var(--radius);\n  margin-bottom: 40px;\n  display: flex;\n  flex-direction: column; }\n  .calculate-block:before {\n    content: \" \";\n    display: block;\n    position: absolute;\n    top: var(--border-width);\n    left: var(--border-width);\n    right: var(--border-width);\n    bottom: var(--border-width);\n    border-radius: var(--radius);\n    background-image: linear-gradient(120deg, #fff 25%, rgba(255, 255, 255, 0) 50%), linear-gradient(300deg, #ccc 14%, rgba(255, 255, 255, 0) 40%);\n    z-index: -1; }\n  .calculate-block:after {\n    content: \" \";\n    display: block;\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: calc(var(--radius) - 1px);\n    background-image: linear-gradient(165deg, #eceff4 9%, #ffffff 80%);\n    z-index: -1; }\n  .calculate-block__content {\n    display: flex; }\n\n.constants {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  width: 250px;\n  padding: 20px;\n  background: #e5e9f0;\n  border-radius: var(--radius) 0 0 var(--radius); }\n  .constants h4 {\n    margin-bottom: 20px; }\n\nlabel {\n  display: flex;\n  flex-direction: column;\n  font-size: 12px;\n  margin-bottom: 8px; }\n  label span {\n    margin-bottom: 5px; }\n\n.text-input {\n  font-size: 16px;\n  padding: 6px 10px;\n  background: #fff;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  width: 70px; }\n\n.buttons {\n  display: flex;\n  flex-direction: column;\n  margin-top: 40px; }\n\n.startButton {\n  border: 0;\n  padding: 8px 20px;\n  font-size: 14px;\n  color: #fff;\n  border-radius: var(--radius);\n  background-color: #81a1c1;\n  outline: 0;\n  margin-bottom: 20px; }\n\n.flex {\n  display: flex;\n  margin-bottom: 10px; }\n  .flex > *:not(:last-child) {\n    margin-right: 12px; }\n\n.storage-buttons {\n  margin-top: auto;\n  padding-top: 30px; }\n\n/*# sourceMappingURL=PathCalculate.svelte.css.map */</style>\r\n\r\n<MatrixRender {graph} {metroImage} />\r\n\r\n<div class=\"calculate-block-wrapper\" in:fly={{ y: 50, duration: 1000 }}>\r\n\r\n  <div class=\"calculate-block\">\r\n\r\n    <div class=\"calculate-block__content\">\r\n\r\n      <div class=\"constants\">\r\n        <h4>Algorithm parameters</h4>\r\n\r\n        <div class=\"flex\">\r\n          <label>\r\n            <span>Population size:</span>\r\n            <input\r\n              class=\"text-input\"\r\n              bind:value={populationSize}\r\n              type=\"number\"\r\n              step=\"1\"\r\n              min=\"1\"\r\n              max=\"50\" />\r\n          </label>\r\n\r\n          <label>\r\n            <span>Interval duration:</span>\r\n            <input\r\n              disabled={running}\r\n              class=\"text-input\"\r\n              bind:value={intervalDuration}\r\n              type=\"number\"\r\n              step=\"20\"\r\n              min=\"10\"\r\n              max=\"3000\" />\r\n          </label>\r\n        </div>\r\n\r\n        <div class=\"flex\">\r\n          <label>\r\n            <span>Crossover probability:</span>\r\n            <input\r\n              class=\"text-input\"\r\n              bind:value={crossoverProbability}\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              min=\"0.01\"\r\n              max=\"1\" />\r\n          </label>\r\n        </div>\r\n\r\n        <label>\r\n          <span>Mutation probability:</span>\r\n          <input\r\n            class=\"text-input\"\r\n            bind:value={mutationProps.mutationProbability}\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            min=\"0.01\"\r\n            max=\"1\" />\r\n        </label>\r\n        <label>\r\n          <span>'Do' mutation:</span>\r\n          <input\r\n            class=\"text-input\"\r\n            bind:value={mutationProps.doMutateProbability}\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            min=\"0.01\"\r\n            max=\"1\" />\r\n        </label>\r\n        <label>\r\n          <span>'Push' mutation:</span>\r\n          <input\r\n            class=\"text-input\"\r\n            bind:value={mutationProps.pushMutateProbability}\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            min=\"0.01\"\r\n            max=\"1\" />\r\n        </label>\r\n        <label>\r\n          <span>'Reverse' mutation:</span>\r\n          <input\r\n            class=\"text-input\"\r\n            bind:value={mutationProps.reverseMutateProbability}\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            min=\"0.01\"\r\n            max=\"1\" />\r\n        </label>\r\n\r\n        <div class=\"buttons\">\r\n          <button class=\"startButton protrude\" on:click={onStart}>Start</button>\r\n          <button class=\"startButton protrude\" on:click={onStop}>Stop</button>\r\n        </div>\r\n\r\n        {#if !running && bestValue}\r\n          <div class=\"storage-buttons\">\r\n            <button class=\"startButton protrude\" on:click={onSave}>\r\n              Save to storage\r\n            </button>\r\n\r\n            {#if bestResultsFromStorage.length}\r\n              <button class=\"startButton protrude\" on:click={onClear}>\r\n                Clear storage\r\n              </button>\r\n            {/if}\r\n          </div>\r\n        {/if}\r\n      </div>\r\n\r\n      <ResultGrid\r\n        {running}\r\n        {graph}\r\n        {currentGeneration}\r\n        {mutationsCount}\r\n        {crossoversCount}\r\n        {bestValue}\r\n        {currentBest}\r\n        {population}\r\n        {best}\r\n        {bestValuesArray}\r\n        {bestResultsFromStorage} />\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  import StopWatch from \"../stopWatch/StopWatch.svelte\";\r\n\r\n  export let running;\r\n  export let graph;\r\n  export let currentGeneration;\r\n  export let mutationsCount;\r\n  export let crossoversCount;\r\n  export let bestValue;\r\n  export let currentBest;\r\n  export let population;\r\n  export let best;\r\n  export let bestValuesArray;\r\n  export let bestResultsFromStorage;\r\n\r\n  $: bestPopulation =\r\n    population[currentBest.bestPosition] ?\r\n    population[currentBest.bestPosition].toString() : '';\r\n\r\n  $: bestValuesString = bestValuesArray.join(\" > \").toString();\r\n</script>\r\n\r\n<style lang=\"scss\">.info {\n  font-family: \"Courier New\", Courier, monospace;\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  flex: 3; }\n\n.table {\n  display: flex;\n  flex: 1;\n  padding: 10px; }\n  .table__content {\n    flex: 1;\n    margin-left: 20px; }\n\n.stop-watch {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 16px; }\n\n.paths {\n  padding: 10px 30px;\n  flex: 2; }\n\n.paths-row {\n  margin-bottom: 10px; }\n\n.row {\n  display: flex;\n  margin-bottom: 10px; }\n\n.row-result .label {\n  margin-top: 10px; }\n\n.row-result .value {\n  font-size: 30px; }\n\n.value {\n  margin-left: auto; }\n\n.value-row {\n  word-break: break-word; }\n\np {\n  font-size: 11px;\n  line-height: 1.2; }\n\n/*# sourceMappingURL=ResultGrid.svelte.css.map */</style>\r\n\r\n<div class=\"info\">\r\n  <div class=\"table\">\r\n    <div class=\"stop-watch\">\r\n      <StopWatch {running} />\r\n    </div>\r\n    <div class=\"table__content\">\r\n      <div class=\"row\">\r\n        <div class=\"label\">Stations:</div>\r\n        <div class=\"value\">{graph.nodes().length}</div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"label\">Generation:</div>\r\n        <div class=\"value\">{currentGeneration}</div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"label\">Mutations:</div>\r\n        <div class=\"value\">{mutationsCount}</div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"label\">Crossovers:</div>\r\n        <div class=\"value\">{crossoversCount}</div>\r\n      </div>\r\n      <div class=\"row row-result\">\r\n        <div class=\"label\">Best result:</div>\r\n        <div class=\"value\">{ bestValue}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"paths\">\r\n    <div class=\"paths-row\">\r\n      <div class=\"label-row\">Сhange of the best result</div>\r\n      <div class=\"value-row\">\r\n        <p>{bestValuesString}</p>\r\n      </div>\r\n    </div>\r\n  \r\n    <div class=\"paths-row\">\r\n      <div class=\"label-row\">Best path</div>\r\n      <div class=\"value-row\">\r\n        <p>{best.toString()}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"paths-row\">\r\n      <div class=\"label-row\">Best path in current population</div>\r\n      <div class=\"value-row\">\r\n        <p>{bestPopulation}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"paths-row\">\r\n      <div class=\"label-row\">Best value in population</div>\r\n      <div class=\"value-row\">\r\n        <p>{currentBest.bestValue}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"paths-row\">\r\n      <div class=\"label-row\">Population</div>\r\n      <div class=\"value-row\">\r\n        {#each population as item}\r\n          <p>{item.toString()}</p>\r\n        {/each}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"paths-row\">\r\n      <div class=\"label-row\">Best results from storage</div>\r\n      <div class=\"value-row\">\r\n        {#each bestResultsFromStorage as item}\r\n          {#if item.bestValue && item.bestPath}\r\n            <p>{item.bestValue} - {item.bestPath.toString()}</p>\r\n          {/if}\r\n        {:else}\r\n          <p>No paths in storage</p>\r\n        {/each}\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  import { fly } from 'svelte/transition';\r\n\r\n  export let graph, metroImage;\r\n</script>\r\n\r\n<style lang=\"scss\">h3 {\n  margin-bottom: 20px; }\n\n.matrix-render {\n  margin-bottom: 30px; }\n  .matrix-render__data {\n    display: flex; }\n    .matrix-render__data .metro-image {\n      margin-left: auto;\n      max-width: 35%;\n      min-width: 35%; }\n      .matrix-render__data .metro-image img {\n        width: 100%; }\n    .matrix-render__data .metro-table-wrapper {\n      overflow: auto;\n      -webkit-overflow-scrolling: touch;\n      width: 100%;\n      max-height: 500px;\n      margin-right: 20px; }\n    .matrix-render__data .metro-table {\n      font-size: 10px;\n      border-spacing: 0;\n      text-align: right;\n      font-family: monospace;\n      width: 100%;\n      padding-bottom: 20px; }\n      .matrix-render__data .metro-table__hd {\n        font-weight: 600;\n        background: #e5e9f0; }\n      .matrix-render__data .metro-table td {\n        width: 20px;\n        padding: 1px 2px; }\n\n/*# sourceMappingURL=MatrixRender.svelte.css.map */</style>\r\n\r\n<div class=\"matrix-render\" in:fly=\"{{ y: 50, duration: 1000 }}\">\r\n  <h3>Adjacency matrix of the metrograph</h3>\r\n\r\n  <div class=\"matrix-render__data\">\r\n    <div class=\"metro-table-wrapper\">\r\n      <table class=\"metro-table\">\r\n          <tr>\r\n            <td></td>\r\n            {#each graph.nodes() as node1}\r\n              <td class=\"metro-table__hd\">{node1}</td>\r\n            {/each}\r\n          </tr>\r\n\r\n          {#each graph.nodes() as node1}\r\n            <tr>\r\n              <td class=\"metro-table__hd\">{node1}</td>\r\n              {#each graph.nodes() as node2}\r\n                <td>{graph.getEdgeWeight(node1, node2)}</td>\r\n              {/each}\r\n            <tr>\r\n          {/each}\r\n        </table>\r\n      \r\n    </div>\r\n\r\n    <div class=\"metro-image\">\r\n      <img alt=\"metro-image\" src={metroImage}/>\r\n    </div>\r\n  </div>\r\n</div>",
    "<script>\r\n  export let stationsPath, resultPath, stations, metroImage, schemeSVGData;\r\n\r\n  let isMapActive = true;\r\n  let timerId;\r\n  let showingStation,\r\n    showingRow = null;\r\n\r\n  const ANIMATION_DURATION = 200;\r\n\r\n  // Events\r\n  function onStationHover(index, rowIndex) {\r\n    clearListInterval();\r\n    showStation(index);\r\n    showingRow = null;\r\n  }\r\n  function onPlay() {\r\n    clearListInterval();\r\n    initInterval();\r\n  }\r\n\r\n  function initInterval() {\r\n    let index = 0;\r\n    timerId = setInterval(() => {\r\n      if (index < stationsPath.length) {\r\n        showStation(stationsPath[index].id);\r\n        showingRow = index;\r\n        index++;\r\n      } else {\r\n        clearListInterval();\r\n        disableStationHover();\r\n      }\r\n    }, ANIMATION_DURATION);\r\n  }\r\n  function clearListInterval() {\r\n    showingRow = null;\r\n    clearInterval(timerId);\r\n  }\r\n  function showStation(index) {\r\n    isMapActive = false;\r\n    showingStation = index;\r\n  }\r\n  function disableStationHover() {\r\n    isMapActive = true;\r\n    showingStation = null;\r\n  }\r\n\r\n  // For render\r\n  const getStation = station => stations.find(item => item.id == station) || {};\r\n\r\n  const colors = {\r\n    red: \"#d22531\",\r\n    blue: \"#2060ba\",\r\n    green: \"#41a747\",\r\n    text: \"#09303b\",\r\n    textDisable: \"#9c98a6\"\r\n  };\r\n</script>\r\n\r\n<style lang=\"scss\">.container {\n  display: flex; }\n\naside {\n  background: #f0f0f0;\n  padding: 10px;\n  max-height: 800px;\n  overflow: auto;\n  padding-right: 24px; }\n\n.station {\n  opacity: 0; }\n\n.fadein {\n  opacity: 1; }\n\n.svg-render {\n  position: relative;\n  width: 500px;\n  margin: 50px auto; }\n  .svg-render__back {\n    position: absolute;\n    z-index: 1;\n    opacity: 0.1; }\n    .svg-render__back.active {\n      opacity: 1; }\n\n.map {\n  position: relative;\n  z-index: 2;\n  display: block;\n  width: 100%; }\n  .map-active {\n    opacity: 0; }\n    .map-active .station {\n      opacity: 1; }\n\n.start-button {\n  border: 0;\n  padding: 8px 20px;\n  font-size: 14px;\n  color: #fff;\n  border-radius: var(--radius);\n  background-color: #81a1c1;\n  outline: 0;\n  margin-bottom: 20px; }\n\n.aside-row {\n  font-size: 12px;\n  display: flex;\n  justify-content: space-between; }\n  .aside-row__name {\n    padding-bottom: 7px;\n    margin-bottom: -2px; }\n    .aside-row__name.active, .aside-row__name:hover {\n      background: #ccc; }\n    .aside-row__name :global(tspan) {\n      pointer-events: none; }\n  .aside-row__stations {\n    flex: 1; }\n  .aside-row__weight {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    padding-bottom: 7px;\n    margin-bottom: -2px;\n    margin-left: 16px; }\n    .aside-row__weight:before {\n      content: \"\";\n      position: absolute;\n      display: block;\n      top: 0;\n      right: 4px;\n      bottom: 22px;\n      width: 2px;\n      background: #000; }\n\n/*# sourceMappingURL=SchemeRender.svelte.css.map */</style>\r\n\r\n<div class=\"container\">\r\n\r\n  <aside>\r\n    <button class=\"start-button\" on:click={onPlay}>Play</button>\r\n\r\n    {#each resultPath as gap, index}\r\n      <div class=\"aside-row\">\r\n        <div class=\"aside-row__stations\">\r\n          {#each gap.stations as station, indexInside}\r\n            <div\r\n              class=\"aside-row__name {gap.counter - gap.stations.length + indexInside + 1 === showingRow ? 'active' : ''}\"\r\n              on:mouseenter={() => onStationHover(getStation(station).id)}\r\n              on:mouseout={disableStationHover}>\r\n              {@html getStation(station).text}\r\n            </div>\r\n          {/each}\r\n        </div>\r\n        <div class=\"aside-row__weight\">{gap.weight}</div>\r\n      </div>\r\n    {/each}\r\n  </aside>\r\n\r\n  <div class=\"svg-render\">\r\n    <img\r\n      class=\"svg-render__back {isMapActive ? 'active' : ''}\"\r\n      alt=\"metro-image\"\r\n      src={metroImage} />\r\n\r\n    {#if schemeSVGData}\r\n      <svg\r\n        font-family={schemeSVGData.font}\r\n        viewBox={schemeSVGData.viewBox}\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n        class=\"map {isMapActive ? 'map-active' : ''}\">\r\n\r\n        {#if schemeSVGData.defs}\r\n          <defs>\r\n            {@html schemeSVGData.defs}\r\n          </defs>\r\n        {/if}\r\n\r\n        <g fill={colors.text}>\r\n          {#each stationsPath as station, index (station.id)}\r\n            {#if station}\r\n              <g class=\"station {showingStation == station.id ? 'fadein' : ''}\">\r\n                <g stroke={colors[station.color]}>\r\n                  {@html station.path}\r\n                </g>\r\n\r\n                <g fill={colors[station.color]}>\r\n                  {@html station.stop}\r\n                </g>\r\n\r\n                <text style={station.style}>\r\n                  {@html station.text}\r\n                </text>\r\n              </g>\r\n            {/if}\r\n          {/each}\r\n        </g>\r\n\r\n      </svg>\r\n    {/if}\r\n\r\n  </div>\r\n\r\n</div>\r\n",
    "<script>\r\n  import { formatTime } from \"./utils.js\";\r\n\r\n  export let lapse = 0;\r\n\r\n  $: rotation = ((lapse / 1000 / 60) * 360) % 360;\r\n  let seconds;\r\n  let minutes;\r\n  let transitioned;\r\n\r\n  $: if (!lapse && minutes && seconds) {\r\n    minutes.style.transition = \"transform 0.2s ease-in-out\";\r\n    seconds.style.transition = \"transform 0.2s ease-in-out\";\r\n    transitioned = false;\r\n  }\r\n  $: if (lapse && !transitioned) {\r\n    minutes.style.transition = \"none\";\r\n    seconds.style.transition = \"none\";\r\n    transitioned = true;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  svg {\r\n    font-family: monospace;\r\n    color: hsl(0, 0%, 5%);\r\n  }\r\n</style>\r\n\r\n<svg viewBox=\"0 0 100 100\" width=\"230\" height=\"230\">\r\n  <g transform=\"translate(50 50)\">\r\n    <circle\r\n      cx=\"0\"\r\n      cy=\"0\"\r\n      r=\"42\"\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      stroke-width=\"6\"\r\n      stroke-dasharray=\"0.3 1.898\"\r\n      transform=\"scale(-1 1)\"/>\r\n\r\n    <g bind:this={minutes} transform=\"rotate({rotation})\">\r\n      <g transform=\"translate(0 -50)\">\r\n        <path\r\n          d=\"M -2.25 0 h 4.5 l -2.25 2.5 l -2.25 -2.5\"\r\n          fill=\"currentColor\"\r\n          stroke=\"currentColor\"\r\n          stroke-width=\"1\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-linecap=\"round\" />\r\n      </g>\r\n    </g>\r\n\r\n    <g\r\n      transform=\"translate(0 20)\"\r\n      stroke=\"currentColor\"\r\n      stroke-width=\"0.4\"\r\n      fill=\"none\">\r\n      <g bind:this={seconds} transform=\"rotate({(rotation * 60) % 360})\">\r\n        <path\r\n          d=\"M 0 -1 v -7.5\"\r\n          stroke-linejoin=\"round\"\r\n          stroke-linecap=\"round\" />\r\n      </g>\r\n      <circle r=\"9\" />\r\n      <circle r=\"1\" />\r\n    </g>\r\n\r\n    <text\r\n      text-anchor=\"middle\"\r\n      fill=\"currentColor\"\r\n      dominant-baseline=\"middle\"\r\n      font-size=\"14\"\r\n      style=\"font-weight: 300; letter-spacing: 1px;\">\r\n      {formatTime(lapse)}\r\n    </text>\r\n  </g>\r\n</svg>\r\n"
  ],
  "names": [],
  "mappings": "AAmFkC,CAAC,AAAC,CAAU,QAAQ,AAAC,CAAU,OAAO,AAAE,CAAC,AACzE,UAAU,CAAE,UAAU,AAAE,CAAC,AAEnB,KAAK,AAAE,CAAC,AACd,cAAc,CAAE,IAAI,CACpB,QAAQ,CAAE,GAAG,AAAE,CAAC,AAEV,IAAI,AAAC,CAAU,IAAI,AAAE,CAAC,AAC5B,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,AAAE,CAAC,AAEb,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,IAAI,AAAE,CAAC,AAEV,IAAI,AAAE,CAAC,AACb,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,UAAU,CACtB,WAAW,CAAE,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,CAAC,UAAU,AAAE,CAAC,AAErI,MAAM,AAAC,CACP,MAAM,AAAE,CAAC,AACf,WAAW,CAAE,CAAC,AAAE,CAAC,AAEX,IAAI,AAAE,CAAC,AACb,SAAS,CAAE,CAAC,AAAE,CAAC,AAET,CAAC,AAAE,CAAC,AACV,KAAK,CAAE,OAAO,CACd,eAAe,CAAE,IAAI,AAAE,CAAC,AAElB,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,CAAC,AAAE,CAAC,AACxF,MAAM,CAAE,CAAC,AAAE,CAAC,AAEN,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAE,CAAC,AACrC,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,IAAI,AAAE,CAAC,AAEb,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACjB,IAAI,AAAE,CAAC,AACb,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,KAAK,AAAE,CAAC,AAAC,CAAC,AAEnB,MAAM,AAAE,CAAC,AACf,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACjB,MAAM,AAAE,CAAC,AACf,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,KAAK,AAAE,CAAC,AAAC,CAAC,AAEnB,MAAM,AAAE,CAAC,AACf,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,IAAI,AAAE,CAAC,AAClB,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACjB,MAAM,AAAE,CAAC,AACf,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,KAAK,AAAE,CAAC,AAAC,CAAC;AChJR,eAAe,eAAC,CAAC,AAClC,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,aAAa,eAAC,CAAC,AACb,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,GAAG,CACjB,KAAK,CAAE,KAAK,AAAE,CAAC,AAEjB,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,WAAW,CACpB,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,AAAE,CAAC,AACpB,0BAAW,CAAC,IAAI,eAAC,CAAC,AAChB,aAAa,CAAE,GAAG,AAAE,CAAC,AAEzB,YAAY,eAAC,CAAC,AACZ,YAAY,CAAE,IAAI,AAAE,CAAC,AACrB,2BAAY,CAAC,OAAO,eAAC,CAAC,AACpB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,IAAI,AAAE,CAAC,AACnB,2BAAY,CAAC,sBAAO,MAAM,AAAC,CAAC,AAC1B,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,OAAO,AAAE,CAAC,AACxB,2BAAY,CAAC,OAAO,CAAC,GAAG,eAAC,CAAC,AACxB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,IAAI,CACnB,aAAa,CAAE,GAAG,AAAE,CAAC,AACvB,2BAAY,CAAC,OAAO,CAAC,EAAE,eAAC,CAAC,AACvB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,GAAG,AAAE,CAAC,AACvB,mBAAmB,eAAC,CAAC,AACnB,OAAO,CAAE,IAAI,AAAE,CAAC,AAChB,mBAAmB,QAAQ,CAAG,OAAO,eAAC,CAAC,AACrC,UAAU,CAAE,OAAO,AAAE,CAAC,AACtB,mBAAmB,QAAQ,CAAG,sBAAO,MAAM,AAAC,CAAC,AAC3C,MAAM,CAAE,OAAO,CACf,YAAY,CAAE,OAAO,AAAE,CAAC;ACjEb,OAAO,eAAC,CAAC,AAC1B,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,AAAE,CAAC,AAChB,sBAAO,CAAC,KAAK,eAAC,CAAC,AACb,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,GAAG,AAAE,CAAC,AACtB,sBAAO,CAAC,MAAM,eAAC,CAAC,AACd,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,CAAC,AAAE,CAAC;ACyBE,SAAS,OAAO,CAAC,AACpC,EAAE,eAAC,CAAC,AACF,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,IAAI,AAAE,CAAC,AAEhB,kBAAkB,eAAC,CAAC,AAClB,QAAQ,CAAE,IAAI,CACd,0BAA0B,CAAE,KAAK,CACjC,cAAc,CAAE,IAAI,AAAE,CAAC,AAEzB,UAAU,eAAC,CAAC,AACV,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,IAAI,AAAE,CAAC,AAChB,gBAAgB,eAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,YAAY,CAAE,IAAI,AAAE,CAAC,AACrB,+BAAgB,KAAK,WAAW,CAAC,CAAC,+BAAgB,KAAK,WAAW,CAAC,MAAM,AAAC,CAAC,AACzE,OAAO,CAAE,GAAG,AAAE,CAAC,AACjB,+BAAgB,KAAK,WAAW,CAAC,CAAC,+BAAgB,WAAW,MAAM,AAAC,CAAC,AACnE,OAAO,CAAE,GAAG,AAAE,CAAC,AACjB,+BAAgB,WAAW,AAAC,CAAC,AAC3B,WAAW,CAAE,MAAM,AAAE,CAAC,AACxB,+BAAgB,MAAM,AAAC,CAAC,AACtB,OAAO,CAAE,EAAE,CACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,IAAI,mVAAmV,CAAC,CAC1W,iBAAiB,CAAE,SAAS,CAC5B,mBAAmB,CAAE,MAAM,CAAC,MAAM,AAAE,CAAC,AACzC,gBAAgB,eAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,QAAQ,CACzB,aAAa,CAAE,GAAG,AAAE,CAAC;ACgEN,wBAAwB,eAAC,CAAC,AAC3C,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,gBAAgB,eAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CACpC,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AAAE,CAAC,AACzB,+BAAgB,OAAO,AAAC,CAAC,AACvB,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,cAAc,CAAC,CACxB,IAAI,CAAE,IAAI,cAAc,CAAC,CACzB,KAAK,CAAE,IAAI,cAAc,CAAC,CAC1B,MAAM,CAAE,IAAI,cAAc,CAAC,CAC3B,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,gBAAgB,CAAE,gBAAgB,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,gBAAgB,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC9I,OAAO,CAAE,EAAE,AAAE,CAAC,AAChB,+BAAgB,MAAM,AAAC,CAAC,AACtB,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACxC,gBAAgB,CAAE,gBAAgB,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAClE,OAAO,CAAE,EAAE,AAAE,CAAC,AAChB,yBAAyB,eAAC,CAAC,AACzB,OAAO,CAAE,IAAI,AAAE,CAAC,AAEpB,UAAU,eAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,AAAE,CAAC,AACjD,yBAAU,CAAC,EAAE,eAAC,CAAC,AACb,aAAa,CAAE,IAAI,AAAE,CAAC,AAE1B,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,GAAG,AAAE,CAAC,AACrB,oBAAK,CAAC,IAAI,eAAC,CAAC,AACV,aAAa,CAAE,GAAG,AAAE,CAAC,AAEzB,WAAW,eAAC,CAAC,AACX,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,AAAE,CAAC,AAEhB,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,IAAI,AAAE,CAAC,AAErB,YAAY,eAAC,CAAC,AACZ,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,oBAAK,CAAG,eAAC,KAAK,WAAW,CAAC,AAAC,CAAC,AAC1B,YAAY,CAAE,IAAI,AAAE,CAAC,AAEzB,gBAAgB,eAAC,CAAC,AAChB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,AAAE,CAAC;ACjOH,KAAK,cAAC,CAAC,AACxB,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAC9C,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,IAAI,CACb,IAAI,CAAE,CAAC,AAAE,CAAC,AAEZ,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,IAAI,AAAE,CAAC,AAChB,eAAe,cAAC,CAAC,AACf,IAAI,CAAE,CAAC,CACP,WAAW,CAAE,IAAI,AAAE,CAAC,AAExB,WAAW,cAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,IAAI,CAAE,CAAC,AAAE,CAAC,AAEZ,UAAU,cAAC,CAAC,AACV,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,yBAAW,CAAC,MAAM,cAAC,CAAC,AAClB,UAAU,CAAE,IAAI,AAAE,CAAC,AAErB,yBAAW,CAAC,MAAM,cAAC,CAAC,AAClB,SAAS,CAAE,IAAI,AAAE,CAAC,AAEpB,MAAM,cAAC,CAAC,AACN,WAAW,CAAE,IAAI,AAAE,CAAC,AAEtB,UAAU,cAAC,CAAC,AACV,UAAU,CAAE,UAAU,AAAE,CAAC,AAE3B,CAAC,cAAC,CAAC,AACD,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AAAE,CAAC;AC7DF,EAAE,eAAC,CAAC,AACrB,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,cAAc,eAAC,CAAC,AACd,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,oBAAoB,eAAC,CAAC,AACpB,OAAO,CAAE,IAAI,AAAE,CAAC,AAChB,mCAAoB,CAAC,YAAY,eAAC,CAAC,AACjC,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,GAAG,AAAE,CAAC,AACjB,mCAAoB,CAAC,YAAY,CAAC,GAAG,eAAC,CAAC,AACrC,KAAK,CAAE,IAAI,AAAE,CAAC,AAClB,mCAAoB,CAAC,oBAAoB,eAAC,CAAC,AACzC,QAAQ,CAAE,IAAI,CACd,0BAA0B,CAAE,KAAK,CACjC,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,KAAK,CACjB,YAAY,CAAE,IAAI,AAAE,CAAC,AACvB,mCAAoB,CAAC,YAAY,eAAC,CAAC,AACjC,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,CAAC,CACjB,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,SAAS,CACtB,KAAK,CAAE,IAAI,CACX,cAAc,CAAE,IAAI,AAAE,CAAC,AACvB,mCAAoB,CAAC,gBAAgB,eAAC,CAAC,AACrC,WAAW,CAAE,GAAG,CAChB,UAAU,CAAE,OAAO,AAAE,CAAC,AACxB,mCAAoB,CAAC,YAAY,CAAC,EAAE,eAAC,CAAC,AACpC,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,GAAG,CAAC,GAAG,AAAE,CAAC;ACsBR,UAAU,eAAC,CAAC,AAC7B,OAAO,CAAE,IAAI,AAAE,CAAC,AAElB,KAAK,eAAC,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,IAAI,CACd,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,CAAC,AAAE,CAAC,AAEf,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,CAAC,AAAE,CAAC,AAEf,WAAW,eAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CAAC,IAAI,AAAE,CAAC,AACpB,iBAAiB,eAAC,CAAC,AACjB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,GAAG,AAAE,CAAC,AACf,iBAAiB,OAAO,eAAC,CAAC,AACxB,OAAO,CAAE,CAAC,AAAE,CAAC,AAEnB,IAAI,eAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AAAE,CAAC,AACd,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,CAAC,AAAE,CAAC,AACb,0BAAW,CAAC,QAAQ,eAAC,CAAC,AACpB,OAAO,CAAE,CAAC,AAAE,CAAC,AAEnB,aAAa,eAAC,CAAC,AACb,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,UAAU,eAAC,CAAC,AACV,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,AAAE,CAAC,AACjC,gBAAgB,eAAC,CAAC,AAChB,cAAc,CAAE,GAAG,CACnB,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,gBAAgB,sBAAO,CAAE,+BAAgB,MAAM,AAAC,CAAC,AAC/C,UAAU,CAAE,IAAI,AAAE,CAAC,AACrB,+BAAgB,CAAC,AAAQ,KAAK,AAAE,CAAC,AAC/B,cAAc,CAAE,IAAI,AAAE,CAAC,AAC3B,oBAAoB,eAAC,CAAC,AACpB,IAAI,CAAE,CAAC,AAAE,CAAC,AACZ,kBAAkB,eAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,QAAQ,CACzB,cAAc,CAAE,GAAG,CACnB,aAAa,CAAE,IAAI,CACnB,WAAW,CAAE,IAAI,AAAE,CAAC,AACpB,iCAAkB,OAAO,AAAC,CAAC,AACzB,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,CACd,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,AAAE,CAAC;AChHvB,GAAG,eAAC,CAAC,AACH,WAAW,CAAE,SAAS,CACtB,KAAK,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACvB,CAAC"
}