{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/pathCalculate/PathCalculate.svelte",
    "../src/SchemeRender.svelte",
    "../src/stopWatch/StopWatchSVG.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Scheme from \"./Scheme.svelte\";\n  import initArrayPrototypes from \"./helpers/arrayExtends\";\n  \n  initArrayPrototypes();\n</script>\n\n<style global lang=\"scss\">:global(*), :global(*:before), :global(*:after) {\n  box-sizing: border-box; }\n\n:global(html), :global(body) {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: #fff; }\n\n:global(html) {\n  display: flex; }\n\n:global(body) {\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  color: #000;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: Tahoma, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif; }\n\n:global(header),\n:global(footer) {\n  flex-shrink: 0; }\n\n:global(main) {\n  flex-grow: 1; }\n\n:global(a) {\n  color: inherit;\n  text-decoration: none; }\n\n:global(h1), :global(h2), :global(h3), :global(h4), :global(h5), :global(h6), :global(p) {\n  margin: 0; }\n\n:global(ul), :global(ol), :global(li) {\n  padding: 0;\n  margin: 0;\n  list-style: none; }\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAuc3ZlbHRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usc0JBQXNCLEVBQUU7O0FBRTFCO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxZQUFZO0VBQ1osZ0JBQWdCLEVBQUU7O0FBRXBCO0VBQ0UsYUFBYSxFQUFFOztBQUVqQjtFQUNFLGlCQUFpQjtFQUNqQixXQUFXO0VBQ1gsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixXQUFXO0VBQ1gsU0FBUztFQUNULFVBQVU7RUFDVixzQkFBc0I7RUFDdEIsd0lBQXdJLEVBQUU7O0FBRTVJOztFQUVFLGNBQWMsRUFBRTs7QUFFbEI7RUFDRSxZQUFZLEVBQUU7O0FBRWhCO0VBQ0UsY0FBYztFQUNkLHFCQUFxQixFQUFFOztBQUV6QjtFQUNFLFNBQVMsRUFBRTs7QUFFYjtFQUNFLFVBQVU7RUFDVixTQUFTO0VBQ1QsZ0JBQWdCLEVBQUUiLCJmaWxlIjoic3JjL0FwcC5zdmVsdGUiLCJzb3VyY2VzQ29udGVudCI6WyIqLCAqOmJlZm9yZSwgKjphZnRlciB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cblxuaHRtbCwgYm9keSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogI2ZmZjsgfVxuXG5odG1sIHtcbiAgZGlzcGxheTogZmxleDsgfVxuXG5ib2R5IHtcbiAgbWluLWhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBjb2xvcjogIzAwMDtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBmb250LWZhbWlseTogVGFob21hLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFwiU2Vnb2UgVUlcIiwgUm9ib3RvLCBPeHlnZW4tU2FucywgVWJ1bnR1LCBDYW50YXJlbGwsIFwiSGVsdmV0aWNhIE5ldWVcIiwgc2Fucy1zZXJpZjsgfVxuXG5oZWFkZXIsXG5mb290ZXIge1xuICBmbGV4LXNocmluazogMDsgfVxuXG5tYWluIHtcbiAgZmxleC1ncm93OiAxOyB9XG5cbmEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG5cbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAge1xuICBtYXJnaW46IDA7IH1cblxudWwsIG9sLCBsaSB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTsgfVxuXG4vKiMgc291cmNlTWFwcGluZ1VSTD1BcHAuc3ZlbHRlLmNzcy5tYXAgKi8iXX0= */</style>\n\n<Scheme />",
    "<script>\n  import StopWatch from \"../stopWatch/StopWatch.svelte\";\n\n  import { createEventDispatcher } from \"svelte\";\n  import { count } from \"./store.js\";\n  const dispatch = createEventDispatcher();\n\n  import { randomNumber } from \"../helpers/randomNumber\";\n  import { evaluate, randomIndivial, getCurrentBest } from \"./helper\";\n  import { selection, mutation, crossover } from \"./algorithm\";\n  import { POPULATION_SIZE, INTERVAL_DURATION } from \"./constants\";\n\n  export let graph;\n  export let stationsBetween;\n  export let dis;\n\n  $: text = \"\";\n\n  let running = false;\n  let mainInterval;\n\n  let iterators = {};\n  let bestValue;\n  let best = [];\n  let currentBest = {};\n  let population = [];\n  let values;\n\n  let count_value;\n\n  const unsubscribe = count.subscribe(value => {\n    count_value = value;\n  });\n\n  function onStartOrStop() {\n    if (running) {\n      clearInterval(mainInterval);\n      dispatch(\"getResult\", {\n        result: best\n      });\n      return (running = false);\n    }\n    initData();\n    GAInitialize();\n    mainInterval = setInterval(render, INTERVAL_DURATION);\n    return (running = true);\n  }\n\n  function initData() {\n    iterators = {\n      currentGeneration: 0\n    };\n    bestValue = undefined;\n    best = [];\n    currentBest = 0;\n    population = [];\n    values = new Array(POPULATION_SIZE);\n  }\n\n  function render() {\n    GANextGeneration();\n\n    text = `<p>\n      There are ${graph.nodes().length} stations in the map. \n      The ${iterators.currentGeneration}th generation \n      with ${count_value} times of mutation. \n      Best value: ${~~bestValue} -- ${currentBest.bestValue}. \n      Path: ${best.toString()}</p>`;\n  }\n\n  function GAInitialize() {\n    const stationsCount = graph.nodes().length;\n    population = Array.apply(null, Array(POPULATION_SIZE)).map(item =>\n      randomIndivial(stationsCount)\n    );\n    setBestValue();\n  }\n  function GANextGeneration() {\n    iterators.currentGeneration++;\n    population = selection(population, currentBest, best, values);\n    population = crossover(population, dis);\n    population = mutation(population);\n    setBestValue();\n  }\n\n  function setBestValue() {\n    values = population.map(item => evaluate(item, dis));\n    currentBest = getCurrentBest(values);\n\n    if (bestValue === undefined || bestValue > currentBest.bestValue) {\n      best = population[currentBest.bestPosition].clone();\n      bestValue = currentBest.bestValue;\n    }\n  }\n\n  function toggleStopWatch() {\n\n  }\n  function stopStopWatch() {\n\n  }\n</script>\n\n<style>\n.startButton {\n  border: 0;\n  padding: 8px 20px;\n  background: #ddd;\n  font-size: 14px;\n}\n.info {\n  display: flex;\n  background: #ddd;\n}\n  .table {\n    background: #eee;\n    max-width: 300px;\n  }\n  .stopWatch {\n    display: flex;\n    justify-content: center;\n  }\n  .row {\n    display: flex;\n  }\n  .value {\n    margin-left: auto;\n  }\n</style>\n\n<div class=\"calculateBlock\">\n  <button class=\"startButton\" on:click={onStartOrStop}>Start/Stop</button>\n\n  \n  <div class=\"info\">\n  <div class=\"table\">\n    <div class=\"stopWatch\">\n        <StopWatch {running}/>\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Stations:</div>\n      <div class=\"value\">{graph.nodes().length}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Generation:</div>\n      <div class=\"value\">{iterators.currentGeneration}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Mutations:</div>\n      <div class=\"value\">{count_value}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Best value:</div>\n      <div class=\"value\">{bestValue}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Best in population:</div>\n      <div class=\"value\">{currentBest.bestValue}</div>\n    </div>\n  </div>\n  \n    <div class=\"paths\">\n      <div>\n        <div class=\"label-row\">Best path:</div>\n        <div class=\"value-row\">{best.toString()}</div>\n      </div>\n\n      <div>\n        <div class=\"label-row\">Best path in current population:</div>\n        <div class=\"value-row\">\n          <p>{ population[currentBest.bestPosition] && population[currentBest.bestPosition].toString() }</p>\n        </div>\n      </div>\n\n      <div>\n        <div class=\"label-row\">Population:</div>\n        <div class=\"value-row\">\n          {#each population as item}\n            <p>{ item.toString()}</p>\n          {/each}\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  \n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n\n  export let stationsBetween;\n  export let path;\n\n  import { quintOut } from 'svelte/easing';\n\timport { fade, draw, fly } from 'svelte/transition';\n\n  let showScheme = false;\n  let resultPath = [];\n  let stationsPath = [];\n  let stations;\n\n  $: showingStation = null;\n\n  onMount(async () => {\n    const res = await fetch(`https://metro.kh.ua/metroapi.php?value=stations`);\n    const data = await res.json();\n    stations = data;\n  });\n\n  function showStation(index) {\n    showingStation = index;\n  }\n\n  function onShow(){\n    showScheme = true;\n  }\n\n  function getResultPath({ path = [], stationsBetween }) {\n    let resultPath = [];\n\n    for (let i = 1; i < path.length; i++) {\n      const firstIndex = path[i - 1];\n      const secondIndex = path[i];\n      let stations = stationsBetween[firstIndex][secondIndex].slice(1);\n      resultPath = resultPath.concat(stations);\n    }\n    resultPath.unshift(path[0]);\n\n    return resultPath;\n  }\n\n  function calculatePath({ path = [], stationsBetween }) {\n    stationsPath = [];\n\n    if(path && path.length) {\n      resultPath = getResultPath({ path, stationsBetween });\n\n      resultPath.map(item => {\n        stationsPath.push(stations.find(station => station.id == item));\n      });\n    }\n  }\n\n  $: calculatePath({ path, stationsBetween });\n\n  const colors = {\n    red: \"#d22531\",\n    blue: \"#2060ba\",\n    green: \"#41a747\",\n    text: \"#09303b\",\n    textDisable: \"#9c98a6\"\n  };\n</script>\n\n<style>\n.container {\n  display: flex;\n}\naside {\n  background: #eee;\n}\n\n.lel {\n  opacity: 1 !important;\n  animation: none !important;\n}\n  .map {\n    display: block;\n    width: 500px;\n    margin: 50px auto;\n  }\n  .fadein {\n    opacity: 0.1;\n    animation: showing 1.25s linear forwards;\n  }\n  @keyframes showing {\n    0% { \n      opacity: 0.1;\n    }\n    30%, 60% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0.1;\n    }\n  }\n</style>\n\n<div>{resultPath}</div>\n\n<button on:click=\"{onShow}\">Show </button>\n\n\n{#if resultPath}\n\n<div class=\"container\">\n\n<aside>\n  {#each stationsPath as station, index}\n    {#if station}\n      <div on:mouseover=\"{() => showStation(index)}\">\n        {@html station.text}\n      </div>\n    {/if}\n  {/each}\n</aside>\n\n{#if showScheme}\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    class=\"map\"\n    font-family=\"Tahoma\"\n    viewBox=\"0 0 1501 2151\">\n\n    <defs>\n      <symbol id=\"w\">\n        <path\n          fill=\"#fff\"\n          d=\"M6.6 11.5a4.9 4.9 0 110-9.8A4.8 4.8 0 019.7 3a9.7 9.7 0 004.5\n          2v3.5a9.7 9.7 0 00-3.9 1.6l-.9.6a4.8 4.8 0 01-2.8 1z\" />\n        <path\n          d=\"M6.7 3.5a3 3 0 012 .7 11.5 11.5 0 003.7 2V7a11.4 11.4 0 00-3.1\n          1.6l-.9.6a3 3 0 01-1.8.6 3.1 3.1 0 110-6.3m0-3.5A6.6 6.6 0 000 6.6a6.6\n          6.6 0 006.6 6.7 6.5 6.5 0 003.8-1.3l.9-.6a8 8 0 014.6-1.4V3.3a8 8 0\n          01-5-1.8A6.5 6.5 0 006.6 0z\" />\n      </symbol>\n    </defs>\n\n    <path\n      fill=\"none\"\n      stroke={colors.green}\n      stroke-width=\"3\"\n      d=\"M747 1310l-18-18-241 241a72 72 0 00-21 51v85h-15v21h56v-21h-16v-85a47\n      47 0 0114-34l46-45 12 12 15-15-12-12z\" />\n\n    <g font-size=\"34\">\n      <text fill={colors.red} transform=\"rotate(-90 1562.5 515.7)\">\n        Холодногірсько-заводська лінія\n      </text>\n      <text fill={colors.blue} transform=\"rotate(-90 700.6 -347.6)\">\n        Салтівська лінія\n      </text>\n      <text fill={colors.green} transform=\"rotate(-90 415.7 -32.8)\">\n        Олексіївська лінія\n      </text>\n    </g>\n    <g fill={colors.text} font-size=\"53\">\n\n      {#if resultPath.length}\n\n        {#each stationsPath as station, index}\n          {#if station}\n            <g class=\"fadein {showingStation === index ? 'lel' : ''}\" style=\"animation-delay: {index / 30 * 10}s\">\n              <g fill=\"none\" stroke-miterlimit=\"10\" stroke-width=\"28\">\n                <g stroke={colors[station.color]}>\n                  {@html station.path}\n                </g>\n              </g>\n\n              <g fill={colors[station.color]}>\n                {@html station.stop}\n              </g>\n\n              <text style={station.style}>\n                {@html station.text}\n              </text>\n            </g>\n          {/if}\n        {/each}\n\n      {/if}\n\n    </g>\n    <g fill={colors.textDisable} font-size=\"53\">\n      <text transform=\"translate(573 1556)\">Державiнська</text>\n      <text transform=\"translate(519 1690)\">Одеська</text>\n    </g>\n  </svg>\n  {/if}\n</div>\n{/if}",
    "<script>\n    import { formatTime } from \"./utils.js\";\n\n    export let lapse = 0;\n\n    $: rotation = ((lapse / 1000 / 60) * 360) % 360;\n    let seconds;\n    let minutes;\n    let transitioned;\n\n    $: if (!lapse && minutes && seconds) {\n        minutes.style.transition = \"transform 0.2s ease-in-out\";\n        seconds.style.transition = \"transform 0.2s ease-in-out\";\n        transitioned = false;\n    }\n    $: if (lapse && !transitioned) {\n        minutes.style.transition = \"none\";\n        seconds.style.transition = \"none\";\n        transitioned = true;\n    }\n</script>\n\n<style>\n    svg {\n        font-family: monospace;\n        color: hsl(0, 0%, 5%);\n    }\n</style>\n<svg viewBox=\"0 0 100 100\" width=\"300\" height=\"300\">\n    <g transform=\"translate(50 50)\">\n        <circle id=\"dial\" cx=\"0\" cy=\"0\" r=\"37.8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"5\" stroke-dasharray=\"0.27 1.7082\"></circle>\n        <use href=\"#dial\" transform=\"scale(-1 1)\"></use>\n\n        <g bind:this=\"{minutes}\" transform=\"rotate({rotation})\">\n            <g transform=\"translate(0 -45)\">\n                <path d=\"M -2.25 0 h 4.5 l -2.25 2.5 l -2.25 -2.5\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"></path>\n            </g>\n        </g>\n\n        <g transform=\"translate(0 20)\">\n            <g bind:this=\"{seconds}\" transform=\"rotate({(rotation * 60) % 360})\">\n                <path d=\"M 0 -1 v -7.5\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"></path>\n            </g>\n            <circle r=\"9\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\"></circle>\n            <circle r=\"1\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\"></circle>\n        </g>\n\n        <text text-anchor=\"middle\" fill=\"currentColor\" dominant-baseline=\"middle\" font-size=\"10\" style=\"font-weight: 300; letter-spacing: 1px;\">\n            {formatTime(lapse)}\n        </text>\n    </g>\n</svg>\n"
  ],
  "names": [],
  "mappings": "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"
}