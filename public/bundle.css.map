{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/GraphSwitcher/GraphSwitcher.svelte",
    "../src/GraphSwitcher/UserMetroGraph.svelte",
    "../src/SchemeRender.svelte",
    "../src/pathCalculate/PathCalculate.svelte",
    "../src/pathCalculate/ResultGrid.svelte",
    "../src/stopWatch/StopWatchSVG.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import PathCalculate from \"./pathCalculate/PathCalculate.svelte\";\n  import SchemeRender from \"./SchemeRender.svelte\";\n  import GraphSwitcher from \"./GraphSwitcher/GraphSwitcher.svelte\";\n  import UserMetroGraph from \"./GraphSwitcher/UserMetroGraph.svelte\";\n  import createGraph from \"./graphBuilder\";\n  \n\n  let selectedMetro;\n  let cache = {};\n\n  let bestPath;\n  let graph;\n  let stationsBetween;\n  let dis;\n\n  let stations;\n\n  function onSelectMetro(e) {\n    selectedMetro = e.detail.result;\n\n    setGraph();\n    setStations();\n  }\n\n  function getResult(e) {\n    bestPath = e.detail.result;\n  }\n\n  function onGetUserGraph(e) {\n    let userGraph = e.detail.result;\n    const graphData = createGraph(userGraph);\n    debugger;\n  }\n\n  async function getGraph() {\n    const res = await fetch(`https://metro.kh.ua/metroapi.php?value=path`);\n    const data = await res.json();\n    return createGraph(data);\n  }\n  async function getStations() {\n    const res = await fetch(`https://metro.kh.ua/metroapi.php?value=stations`);\n    const data = await res.json();\n    return data;\n  };\n  async function setGraph() {\n    const graphData = await getData('graphData', getGraph);\n    graph = graphData.graph;\n    stationsBetween = graphData.stationsBetween;\n    dis = graphData.distances;\n  }\n  async function setStations() {\n    const stationsData = await getData('stations', getStations);\n    stations = stationsData;\n  }\n\n  onMount(async () => {\n    selectedMetro = 1;\n\t\tsetGraph();\n\t\tsetStations();\n  });\n  \n  async function getData(variable, func) {\n    if (cache[variable]) {\n      return cache[variable];\n    }\n    const result = await func();\n    cache[variable] = result;\n    return result;\n  }\n</script>\n\n<style global lang=\"scss\">:global(*), :global(*:before), :global(*:after) {\n  box-sizing: border-box; }\n\n:global(:root) {\n  --border-width: -1px;\n  --radius: 7px;\n  --text-color: #33476B;\n  --text-color-light: #9EB0C4;\n  --shadow-color: #ccdbe8;\n  --mono-font: monaco;\n  --body-font: -apple-system, BlinkMacSystemFont, San Francisco, Helvetica Neue, Helvetica, Ubuntu, Roboto, Noto, Segoe UI, Arial, sans-serif;\n  --padding-small: .75em;\n  --padding-medium: 1.25em;\n  --padding-large: 2em; }\n\n:global(html), :global(body) {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  background: #fff; }\n\n:global(html) {\n  display: flex; }\n\n:global(body) {\n  min-height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  color: #000;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: Tahoma, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif; }\n\n:global(header),\n:global(footer) {\n  flex-shrink: 0; }\n\n:global(main) {\n  flex-grow: 1; }\n\n:global(a) {\n  color: inherit;\n  text-decoration: none; }\n\n:global(h1), :global(h2), :global(h3), :global(h4), :global(h5), :global(h6), :global(p) {\n  margin: 0; }\n\n:global(ul), :global(ol), :global(li) {\n  padding: 0;\n  margin: 0;\n  list-style: none; }\n\n:global(main) {\n  display: block;\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 10px;\n  padding-right: 10px;\n  margin-bottom: 40px; }\n  @media (min-width: 600px) {\n    :global(main) {\n      padding-left: 20px;\n      padding-right: 20px;\n      max-width: 900px; } }\n\n:global(header) {\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 10px;\n  padding-right: 10px;\n  display: block;\n  margin-top: 20px;\n  margin-bottom: 40px; }\n  @media (min-width: 600px) {\n    :global(header) {\n      padding-left: 20px;\n      padding-right: 20px;\n      max-width: 900px; } }\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAuc3ZlbHRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usc0JBQXNCLEVBQUU7O0FBRTFCO0VBQ0Usb0JBQW9CO0VBQ3BCLGFBQWE7RUFDYixxQkFBcUI7RUFDckIsMkJBQTJCO0VBQzNCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsMklBQTJJO0VBQzNJLHNCQUFzQjtFQUN0Qix3QkFBd0I7RUFDeEIsb0JBQW9CLEVBQUU7O0FBRXhCO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxZQUFZO0VBQ1osZ0JBQWdCLEVBQUU7O0FBRXBCO0VBQ0UsYUFBYSxFQUFFOztBQUVqQjtFQUNFLGlCQUFpQjtFQUNqQixXQUFXO0VBQ1gsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixXQUFXO0VBQ1gsU0FBUztFQUNULFVBQVU7RUFDVixzQkFBc0I7RUFDdEIsd0lBQXdJLEVBQUU7O0FBRTVJOztFQUVFLGNBQWMsRUFBRTs7QUFFbEI7RUFDRSxZQUFZLEVBQUU7O0FBRWhCO0VBQ0UsY0FBYztFQUNkLHFCQUFxQixFQUFFOztBQUV6QjtFQUNFLFNBQVMsRUFBRTs7QUFFYjtFQUNFLFVBQVU7RUFDVixTQUFTO0VBQ1QsZ0JBQWdCLEVBQUU7O0FBRXBCO0VBQ0UsY0FBYztFQUNkLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsbUJBQW1CLEVBQUU7RUFDckI7SUFDRTtNQUNFLGtCQUFrQjtNQUNsQixtQkFBbUI7TUFDbkIsZ0JBQWdCLEVBQUUsRUFBRTs7QUFFMUI7RUFDRSxXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsbUJBQW1CO0VBQ25CLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIsbUJBQW1CLEVBQUU7RUFDckI7SUFDRTtNQUNFLGtCQUFrQjtNQUNsQixtQkFBbUI7TUFDbkIsZ0JBQWdCLEVBQUUsRUFBRSIsImZpbGUiOiJzcmMvQXBwLnN2ZWx0ZSIsInNvdXJjZXNDb250ZW50IjpbIiosICo6YmVmb3JlLCAqOmFmdGVyIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuXG46cm9vdCB7XG4gIC0tYm9yZGVyLXdpZHRoOiAtMXB4O1xuICAtLXJhZGl1czogN3B4O1xuICAtLXRleHQtY29sb3I6ICMzMzQ3NkI7XG4gIC0tdGV4dC1jb2xvci1saWdodDogIzlFQjBDNDtcbiAgLS1zaGFkb3ctY29sb3I6ICNjY2RiZTg7XG4gIC0tbW9uby1mb250OiBtb25hY287XG4gIC0tYm9keS1mb250OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFNhbiBGcmFuY2lzY28sIEhlbHZldGljYSBOZXVlLCBIZWx2ZXRpY2EsIFVidW50dSwgUm9ib3RvLCBOb3RvLCBTZWdvZSBVSSwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIC0tcGFkZGluZy1zbWFsbDogLjc1ZW07XG4gIC0tcGFkZGluZy1tZWRpdW06IDEuMjVlbTtcbiAgLS1wYWRkaW5nLWxhcmdlOiAyZW07IH1cblxuaHRtbCwgYm9keSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogI2ZmZjsgfVxuXG5odG1sIHtcbiAgZGlzcGxheTogZmxleDsgfVxuXG5ib2R5IHtcbiAgbWluLWhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBjb2xvcjogIzAwMDtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBmb250LWZhbWlseTogVGFob21hLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFwiU2Vnb2UgVUlcIiwgUm9ib3RvLCBPeHlnZW4tU2FucywgVWJ1bnR1LCBDYW50YXJlbGwsIFwiSGVsdmV0aWNhIE5ldWVcIiwgc2Fucy1zZXJpZjsgfVxuXG5oZWFkZXIsXG5mb290ZXIge1xuICBmbGV4LXNocmluazogMDsgfVxuXG5tYWluIHtcbiAgZmxleC1ncm93OiAxOyB9XG5cbmEge1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG5cbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAge1xuICBtYXJnaW46IDA7IH1cblxudWwsIG9sLCBsaSB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTsgfVxuXG5tYWluIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG4gIG1hcmdpbi1ib3R0b206IDQwcHg7IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KSB7XG4gICAgbWFpbiB7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xuICAgICAgbWF4LXdpZHRoOiA5MDBweDsgfSB9XG5cbmhlYWRlciB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBtYXJnaW4tYm90dG9tOiA0MHB4OyB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA2MDBweCkge1xuICAgIGhlYWRlciB7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xuICAgICAgbWF4LXdpZHRoOiA5MDBweDsgfSB9XG5cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPUFwcC5zdmVsdGUuY3NzLm1hcCAqLyJdfQ== */</style>\n\n<header>\n  <h1>Transit challenge solver</h1>\n  <p>For Kharkiv metropoliten</p>\n</header>\n\n<main>\n  <GraphSwitcher on:onSelectMetro={onSelectMetro} {selectedMetro}/>\n\n  {#if selectedMetro === 2}\n    <UserMetroGraph on:onSubmitGraph={onGetUserGraph}/>\n  {/if}\n\n  {#if graph && stationsBetween && dis}\n    <PathCalculate {graph} {stationsBetween} {dis} on:getResult={getResult}/>\n  {/if}\n\n  {#if bestPath}\n    <SchemeRender path={bestPath} {stationsBetween} {stations}/>\n  {/if}\n</main>",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let selectedMetro;\n\n  function onChange() {\n    dispatch(\"onSelectMetro\", {\n      result: selectedMetro\n    });\n  }\n</script>\n\n<style>\n  section {\n    margin-bottom: 30px;\n  }\n</style> \n\n<section>\n  <label>\n    <input type=radio bind:group={selectedMetro} on:change={onChange} value={1}>\n    Kharkiv metro\n  </label>\n\n  <label>\n    <input type=radio bind:group={selectedMetro} on:change={onChange} value={2}>\n    Other metro\n  </label>\n</section>\n\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  let graphJson = '';\n\n  let source, target, weight;\n  \n  $: links = [];\n\n  function onAdd() {\n    links = [...links, {\n      source,\n      target,\n      weight\n    }];\n\n    source = '';\n    target = '';\n    weight = '';\n\n  }\n\n  function onRemove(item) {\n    links = links.filter(link => link !== item);\n  }\n\n  function onSubmit() {\n    dispatch(\"onSubmitGraph\", {\n      result: graphJson\n    });\n  }\n</script>\n\n<style>\n  section {\n    margin-bottom: 30px;\n  }\n</style> \n\n<section>\n  <p>Links:</p>\n  {#each links as link, index}\n     <p>{link.source} ←→ {link.target} = {link.weight} <button on:click={() => onRemove(link)}>Remove</button> </p> \n  {/each}\n\n  <div>\n  <input bind:value={source} type=\"text\"/>\n  <input bind:value={target} type=\"text\"/>\n  <input bind:value={weight} type=\"number\"/>\n\n  <button on:click={onAdd}>Send</button>\n  </div>\n\n  <button on:click={onSubmit}>Send</button>\n</section>",
    "<script>\n  import { onMount } from \"svelte\";\n  import SchemeSVG from \"./SchemeSVG.svelte\";\n\n  export let stationsBetween;\n  export let path;\n  export let stations;\n\n  let isMapActive = true;\n  let showScheme = false;\n  let resultPath = [];\n  let stationsPath = [];\n\n  let timerId;\n\n  let showingStation = null;\n\n  function showStation(index) {\n    isMapActive = false;\n    showingStation = index;\n  }\n\n  function onStationHover(index) {\n    // debugger;\n    clearInterval(timerId);\n    showStation(index);\n  }\n\n  function disableStationHover() {\n    isMapActive = true;\n    showingStation = null;\n  }\n\n  function onShow() {\n    clearInterval(timerId);\n    showScheme = true;\n    showPath();\n  }\n\n  function getResultPath({ path = [], stationsBetween }) {\n    let resultPath = new Array(path.length);\n    let resultWeight = [];\n\n    for (let i = 1; i < path.length; i++) {\n      const firstIndex = path[i - 1];\n      const secondIndex = path[i];\n      const currentGap = stationsBetween[firstIndex][secondIndex];\n      resultPath[i] = {\n        stations: currentGap.slice(1),\n        weight: currentGap.weight\n      };\n    }\n\n    resultPath[0] = {\n      stations: [path[0].toString()],\n      weight: 0\n    };\n\n    return resultPath;\n  }\n\n  function calculatePath({ path = [], stationsBetween }) {\n    let newStationsPath = [];\n\n    if (path && path.length) {\n      resultPath = getResultPath({ path, stationsBetween });\n\n      resultPath.map(gap => {\n        gap.stations.map(item => {\n          newStationsPath.push(stations.find(station => station.id == item));\n        });\n      });\n    }\n\n    return newStationsPath;\n  }\n\n  function showPath() {\n    let index = 0;\n    timerId = setInterval(() => {\n      if (index < resultPath.length) {\n        showStation(index);\n        index++;\n      } else {\n        clearInterval(timerId);\n        disableStationHover();\n      }\n    }, 300);\n  }\n\n  // onMount(() => {\n  //   stationsPath = calculatePath({ path, stationsBetween });\n  // });\n\n  $: stationsPath = calculatePath({ path, stationsBetween });\n\n  const getStation = station => stations.find(item => item.id == station) || {};\n\n  const colors = {\n    red: \"#d22531\",\n    blue: \"#2060ba\",\n    green: \"#41a747\",\n    text: \"#09303b\",\n    textDisable: \"#9c98a6\"\n  };\n</script>\n\n<style lang=\"scss\">.container {\n  display: flex; }\n\naside {\n  background: #f0f0f0;\n  padding: 10px; }\n\n.station {\n  opacity: 0.1; }\n\n.fadein {\n  opacity: 1; }\n\n.activeStation {\n  background: #ddd; }\n\n.map {\n  display: block;\n  width: 500px;\n  margin: 50px auto; }\n\n.map-active .station {\n  opacity: 1; }\n\n.start-button {\n  border: 0;\n  padding: 8px 20px;\n  font-size: 14px;\n  border-radius: var(--radius);\n  background-color: #E4ECF6;\n  box-shadow: 5px 5px 10px var(--shadow-color), 1px 1px 2px var(--shadow-color), -6px -6px 15px rgba(255, 255, 255, 0.9), -1px -1px 3px 1px rgba(255, 255, 255, 0.9);\n  outline: 0;\n  margin-bottom: 20px; }\n\n.station-row {\n  font-size: 12px;\n  padding-bottom: 5px; }\n\n.aside-row {\n  font-size: 12px;\n  display: flex;\n  justify-content: space-between; }\n  .aside-row__name {\n    padding-bottom: 7px;\n    margin-bottom: -2px; }\n    .aside-row__name :global(tspan) {\n      pointer-events: none; }\n  .aside-row__stations {\n    flex: 1; }\n  .aside-row__weight {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    padding-bottom: 7px;\n    margin-bottom: -2px;\n    margin-left: 16px; }\n    .aside-row__weight:before {\n      content: \"\";\n      position: absolute;\n      display: block;\n      top: 0;\n      right: 4px;\n      bottom: 22px;\n      width: 2px;\n      background: #000; }\n\n/*# sourceMappingURL=SchemeRender.svelte.css.map */</style>\n\n{#if resultPath && resultPath.length}\n\n  <div class=\"container\">\n\n    <aside>\n      <button class=\"start-button\" on:click={onShow}>Play</button>\n\n      {#each resultPath as gap, index}\n        <div class=\"aside-row\">\n          <div class=\"aside-row__stations\">\n            {#each gap.stations as station, indexInside}\n              <div\n                class=\"aside-row__name\"\n                on:mouseenter={() => onStationHover(getStation(station).id)}\n                on:mouseout={disableStationHover}>\n                {@html getStation(station).text}\n              </div>\n            {/each}\n          </div>\n          <div class=\"aside-row__weight\">{gap.weight}</div>\n        </div>\n      {/each}\n    </aside>\n\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      class=\"map {isMapActive ? 'map-active' : ''}\"\n      font-family=\"Tahoma\"\n      viewBox=\"0 0 1501 2151\">\n\n      <defs>\n        <symbol id=\"w\">\n          <path\n            fill=\"#fff\"\n            d=\"M6.6 11.5a4.9 4.9 0 110-9.8A4.8 4.8 0 019.7 3a9.7 9.7 0 004.5\n            2v3.5a9.7 9.7 0 00-3.9 1.6l-.9.6a4.8 4.8 0 01-2.8 1z\" />\n          <path\n            d=\"M6.7 3.5a3 3 0 012 .7 11.5 11.5 0 003.7 2V7a11.4 11.4 0 00-3.1\n            1.6l-.9.6a3 3 0 01-1.8.6 3.1 3.1 0 110-6.3m0-3.5A6.6 6.6 0 000\n            6.6a6.6 6.6 0 006.6 6.7 6.5 6.5 0 003.8-1.3l.9-.6a8 8 0\n            014.6-1.4V3.3a8 8 0 01-5-1.8A6.5 6.5 0 006.6 0z\" />\n        </symbol>\n      </defs>\n\n      <path\n        fill=\"none\"\n        stroke={colors.green}\n        stroke-width=\"3\"\n        d=\"M747 1310l-18-18-241 241a72 72 0 00-21 51v85h-15v21h56v-21h-16v-85a47\n        47 0 0114-34l46-45 12 12 15-15-12-12z\" />\n\n      <g font-size=\"34\">\n        <text fill={colors.red} transform=\"rotate(-90 1562.5 515.7)\">\n          Холодногірсько-заводська лінія\n        </text>\n        <text fill={colors.blue} transform=\"rotate(-90 700.6 -347.6)\">\n          Салтівська лінія\n        </text>\n        <text fill={colors.green} transform=\"rotate(-90 415.7 -32.8)\">\n          Олексіївська лінія\n        </text>\n      </g>\n      <g fill={colors.text} font-size=\"53\">\n\n        {#if resultPath.length}\n          {#each stationsPath as station, index (station.id)}\n            {#if station}\n              <g class=\"station {showingStation == station.id ? 'fadein' : ''}\">\n                <g fill=\"none\" stroke-miterlimit=\"10\" stroke-width=\"28\">\n                  <g stroke={colors[station.color]}>\n                    {@html station.path}\n                  </g>\n                </g>\n\n                <g fill={colors[station.color]}>\n                  {@html station.stop}\n                </g>\n\n                <text style={station.style}>\n                  {@html station.text}\n                </text>\n              </g>\n            {/if}\n          {/each}\n        {/if}\n\n      </g>\n      <g fill={colors.textDisable} font-size=\"53\">\n        <text transform=\"translate(573 1556)\">Державiнська</text>\n        <text transform=\"translate(519 1690)\">Одеська</text>\n      </g>\n    </svg>\n\n    <!-- TODO -->\n    <!-- <SchemeSVG/> -->\n\n  </div>\n{/if}\n",
    "<script>\n  import ResultGrid from \"./ResultGrid.svelte\";\n  import { mutationCount, crossoverCount } from \"./store.js\";\n  import { createEventDispatcher } from \"svelte\";\n  import { randomNumber } from \"../helpers/randomNumber\";\n  import { evaluate, randomIndivial, getCurrentBest } from \"./helper\";\n  import { selection, mutation, crossover } from \"./algorithm\";\n  const dispatch = createEventDispatcher();\n\n  // constants\n  let populationSize = 20;\n  let crossoverProbability = 0.9;\n  let mutationProbability = 0.1;\n  let intervalDuration = 40;\n\n  export let graph;\n  export let stationsBetween;\n  export let dis;\n\n  let running = false;\n  let mainInterval;\n\n  let currentGeneration = 0;\n  let bestValue = 0;\n  let bestValuesArray = [];\n  let best = [];\n  let currentBest = {\n    bestPosition: 0,\n    bestValue: []\n  };\n  let population = [];\n  let values = [];\n  let mutationsCount;\n  let crossoversCount;\n\n  const unsubscribeMutation = mutationCount.subscribe(value => mutationsCount = value );\n  const unsubscribeCrossover = crossoverCount.subscribe(value => crossoversCount = value );\n\n  function onStart() {\n    if (!running) {\n      GAStart();\n      running = true;\n    }\n  }\n\n  function onStop() {\n    if (running) {\n      GAStop();\n      running = false;\n    }\n  }\n\n  function GAStop() {\n    clearInterval(mainInterval);\n    dispatch(\"getResult\", {\n      result: best\n    });\n  }\n\n  function GAStart() {\n    initData();\n    GAInitialize();\n    mainInterval = setInterval(render, intervalDuration);\n  }\n\n  function initData() {\n    currentGeneration = 0;\n    bestValue = undefined;\n    best = [];\n    bestValuesArray = [];\n    currentBest = 0;\n    population = [];\n    values = new Array(populationSize);\n    mutationCount.update(n => 0);\n    crossoverCount.update(n => 0);\n  }\n\n  function render() {\n    GANextGeneration();\n  }\n\n  function GAInitialize() {\n    const stationsCount = graph.nodes().length;\n    population = Array.apply(null, Array(populationSize)).map(item =>\n      randomIndivial(stationsCount)\n    );\n    setBestValue();\n  }\n\n  function GANextGeneration() {\n    currentGeneration++;\n    population = selection(population, currentBest, best, values, populationSize);\n    population = crossover(population, dis, populationSize, crossoverProbability);\n    population = mutation(population, populationSize, mutationProbability);\n    setBestValue();\n  }\n\n  function setBestValue() {\n    values = population.map(item => evaluate(item, dis));\n    currentBest = getCurrentBest(values);\n\n    if (bestValue === undefined || bestValue > currentBest.bestValue) {\n      best = population[currentBest.bestPosition].clone();\n      bestValue = currentBest.bestValue;\n      bestValuesArray = [...bestValuesArray, bestValue];\n    }\n  }\n</script>\n\n<style lang=\"scss\">.calculate-block {\n  margin-bottom: 30px; }\n\n.result-wrapper {\n  position: relative;\n  box-shadow: 0 14px 12px -6px #ccd6e2;\n  z-index: 1;\n  border-radius: var(--radius);\n  padding: 10px;\n  margin-bottom: 20px; }\n  .result-wrapper:before {\n    content: \" \";\n    display: block;\n    position: absolute;\n    top: var(--border-width);\n    left: var(--border-width);\n    right: var(--border-width);\n    bottom: var(--border-width);\n    border-radius: var(--radius);\n    background-image: linear-gradient(120deg, #fff 25%, rgba(255, 255, 255, 0) 50%), linear-gradient(300deg, #ccc 14%, rgba(255, 255, 255, 0) 40%);\n    z-index: -1; }\n  .result-wrapper:after {\n    content: \" \";\n    display: block;\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: calc(var(--radius) - 1px);\n    background-image: linear-gradient(165deg, #ecf0f3 9%, #ffffff 80%);\n    z-index: -1; }\n\n.constants {\n  display: flex;\n  margin-bottom: 20px; }\n\nlabel {\n  display: flex;\n  flex-direction: column;\n  font-size: 12px;\n  margin-right: 20px; }\n  label span {\n    margin-bottom: 5px; }\n\n.text-input {\n  font-size: 16px;\n  padding: 6px 10px;\n  background: #fff;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  width: 70px; }\n\n.buttons {\n  margin-left: auto; }\n\n.startButton {\n  border: 0;\n  padding: 8px 20px;\n  font-size: 14px;\n  border-radius: var(--radius);\n  background-color: #E4ECF6;\n  box-shadow: 5px 5px 10px var(--shadow-color), 1px 1px 2px var(--shadow-color), -6px -6px 15px rgba(255, 255, 255, 0.9), -1px -1px 3px 1px rgba(255, 255, 255, 0.9);\n  outline: 0;\n  margin-left: 10px; }\n\n/*# sourceMappingURL=PathCalculate.svelte.css.map */</style>\n\n<div class=\"calculate-block\">\n\n  <div class=\"result-wrapper\">\n    <div class=\"constants\">\n      <label>\n        <span>Population size:</span>\n        <input\n          class=\"text-input\"\n          bind:value={populationSize}\n          type=\"number\"\n          step=\"1\"\n          min=\"1\"\n          max=\"50\" />\n      </label>\n      <label>\n        <span>Crossover probability:</span>\n        <input\n          class=\"text-input\"\n          bind:value={crossoverProbability}\n          type=\"number\"\n          step=\"0.1\"\n          min=\"0.01\"\n          max=\"1\" />\n      </label>\n      <label>\n        <span>Mutation probability:</span>\n        <input\n          class=\"text-input\"\n          bind:value={mutationProbability}\n          type=\"number\"\n          step=\"0.01\"\n          min=\"0.01\"\n          max=\"1\" />\n      </label>\n      <label>\n        <span>Interval duration:</span>\n        <input\n          class=\"text-input\"\n          bind:value={intervalDuration}\n          type=\"number\"\n          step=\"20\"\n          min=\"10\"\n          max=\"3000\" />\n      </label>\n\n      <div class=\"buttons\">\n        <button class=\"startButton protrude\" on:click={onStart}>Start</button>\n        <button class=\"startButton protrude\" on:click={onStop}>Stop</button>\n      </div>\n    </div>\n\n    <ResultGrid\n      {running}\n      {graph}\n      {currentGeneration}\n      {mutationsCount}\n      {crossoversCount}\n      {bestValue}\n      {currentBest}\n      {population}\n      {best}\n      {bestValuesArray} />\n  </div>\n</div>\n",
    "<script>\n  import StopWatch from \"../stopWatch/StopWatch.svelte\";\n\n  export let running;\n  export let graph;\n  export let currentGeneration;\n  export let mutationsCount;\n  export let crossoversCount;\n  export let bestValue;\n  export let currentBest;\n  export let population;\n  export let best;\n  export let bestValuesArray;\n\n  $: bestPopulation =\n    population[currentBest.bestPosition] ?\n    population[currentBest.bestPosition].toString() : '';\n\n  $: bestValuesString = bestValuesArray.join(\" > \").toString();\n</script>\n\n<style lang=\"scss\">.info {\n  font-family: \"Courier New\", Courier, monospace;\n  display: flex; }\n\n.table {\n  max-width: 300px;\n  flex: 1;\n  padding: 10px; }\n\n.stop-watch {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 16px; }\n\n.paths {\n  padding: 10px 30px;\n  flex: 2; }\n\n.paths-row {\n  margin-bottom: 10px; }\n\n.row {\n  display: flex;\n  margin-bottom: 10px; }\n\n.row-result {\n  flex-direction: column; }\n  .row-result .label {\n    margin-top: 10px; }\n  .row-result .value {\n    font-size: 30px;\n    margin-left: 0; }\n\n.value {\n  margin-left: auto; }\n\np {\n  font-size: 11px;\n  line-height: 1.2; }\n\n/*# sourceMappingURL=ResultGrid.svelte.css.map */</style>\n\n<div class=\"info\">\n  <div class=\"table\">\n    <div class=\"stop-watch\">\n      <StopWatch {running} />\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Stations:</div>\n      <div class=\"value\">{graph.nodes().length}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Generation:</div>\n      <div class=\"value\">{currentGeneration}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Mutations:</div>\n      <div class=\"value\">{mutationsCount}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"label\">Crossovers:</div>\n      <div class=\"value\">{crossoversCount}</div>\n    </div>\n    <div class=\"row row-result\">\n      <div class=\"label\">Best value:</div>\n      <div class=\"value\">{ bestValue}</div>\n    </div>\n  </div>\n\n  <div class=\"paths\">\n    <div class=\"paths-row\">\n      <div class=\"label-row\">Сhange of the best result</div>\n      <div class=\"value-row\">\n        <p>{bestValuesString}</p>\n      </div>\n    </div>\n  \n    <div class=\"paths-row\">\n      <div class=\"label-row\">Best path</div>\n      <div class=\"value-row\">\n        <p>{best.toString()}</p>\n      </div>\n    </div>\n\n    <div class=\"paths-row\">\n      <div class=\"label-row\">Best path in current population</div>\n      <div class=\"value-row\">\n        <p>{bestPopulation}</p>\n      </div>\n    </div>\n\n    <div class=\"paths-row\">\n      <div class=\"label-row\">Best value in population</div>\n      <div class=\"value-row\">\n        <p>{currentBest.bestValue}</p>\n      </div>\n    </div>\n\n    <div class=\"paths-row\">\n      <div class=\"label-row\">Population</div>\n      <div class=\"value-row\">\n        {#each population as item}\n          <p>{item.toString()}</p>\n        {/each}\n      </div>\n    </div>\n  </div>\n</div>\n",
    "<script>\n    import { formatTime } from \"./utils.js\";\n\n    export let lapse = 0;\n\n    $: rotation = ((lapse / 1000 / 60) * 360) % 360;\n    let seconds;\n    let minutes;\n    let transitioned;\n\n    $: if (!lapse && minutes && seconds) {\n        minutes.style.transition = \"transform 0.2s ease-in-out\";\n        seconds.style.transition = \"transform 0.2s ease-in-out\";\n        transitioned = false;\n    }\n    $: if (lapse && !transitioned) {\n        minutes.style.transition = \"none\";\n        seconds.style.transition = \"none\";\n        transitioned = true;\n    }\n</script>\n\n<style>\n    svg {\n        font-family: monospace;\n        color: hsl(0, 0%, 5%);\n    }\n</style>\n<svg viewBox=\"0 0 100 100\" width=\"200\" height=\"200\">\n    <g transform=\"translate(50 50)\">\n        <circle id=\"dial\" cx=\"0\" cy=\"0\" r=\"42\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"5\" stroke-dasharray=\"0.3 1.898\"></circle>\n        <use href=\"#dial\" transform=\"scale(-1 1)\"></use>\n\n        <g bind:this=\"{minutes}\" transform=\"rotate({rotation})\">\n            <g transform=\"translate(0 -50)\">\n                <path d=\"M -2.25 0 h 4.5 l -2.25 2.5 l -2.25 -2.5\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"></path>\n            </g>\n        </g>\n\n        <g transform=\"translate(0 20)\">\n            <g bind:this=\"{seconds}\" transform=\"rotate({(rotation * 60) % 360})\">\n                <path d=\"M 0 -1 v -7.5\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"></path>\n            </g>\n            <circle r=\"9\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\"></circle>\n            <circle r=\"1\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\"></circle>\n        </g>\n\n        <text text-anchor=\"middle\" fill=\"currentColor\" dominant-baseline=\"middle\" font-size=\"14\" style=\"font-weight: 300; letter-spacing: 1px;\">\n            {formatTime(lapse)}\n        </text>\n    </g>\n</svg>\n"
  ],
  "names": [],
  "mappings": "AAyEkC,CAAC,AAAC,CAAU,QAAQ,AAAC,CAAU,OAAO,AAAE,CAAC,AACzE,UAAU,CAAE,UAAU,AAAE,CAAC,AAEnB,KAAK,AAAE,CAAC,AACd,cAAc,CAAE,IAAI,CACpB,QAAQ,CAAE,GAAG,CACb,YAAY,CAAE,OAAO,CACrB,kBAAkB,CAAE,OAAO,CAC3B,cAAc,CAAE,OAAO,CACvB,WAAW,CAAE,MAAM,CACnB,WAAW,CAAE,8HAA8H,CAC3I,eAAe,CAAE,KAAK,CACtB,gBAAgB,CAAE,MAAM,CACxB,eAAe,CAAE,GAAG,AAAE,CAAC,AAEjB,IAAI,AAAC,CAAU,IAAI,AAAE,CAAC,AAC5B,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,AAAE,CAAC,AAEb,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,IAAI,AAAE,CAAC,AAEV,IAAI,AAAE,CAAC,AACb,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,UAAU,CACtB,WAAW,CAAE,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,CAAC,UAAU,AAAE,CAAC,AAErI,MAAM,AAAC,CACP,MAAM,AAAE,CAAC,AACf,WAAW,CAAE,CAAC,AAAE,CAAC,AAEX,IAAI,AAAE,CAAC,AACb,SAAS,CAAE,CAAC,AAAE,CAAC,AAET,CAAC,AAAE,CAAC,AACV,KAAK,CAAE,OAAO,CACd,eAAe,CAAE,IAAI,AAAE,CAAC,AAElB,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,CAAC,AAAE,CAAC,AACxF,MAAM,CAAE,CAAC,AAAE,CAAC,AAEN,EAAE,AAAC,CAAU,EAAE,AAAC,CAAU,EAAE,AAAE,CAAC,AACrC,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,IAAI,AAAE,CAAC,AAEb,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACjB,IAAI,AAAE,CAAC,AACb,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,KAAK,AAAE,CAAC,AAAC,CAAC,AAEnB,MAAM,AAAE,CAAC,AACf,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACjB,MAAM,AAAE,CAAC,AACf,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,KAAK,AAAE,CAAC,AAAC,CAAC;AC5IzB,OAAO,eAAC,CAAC,AACP,aAAa,CAAE,IAAI,AACrB,CAAC;ACmBD,OAAO,eAAC,CAAC,AACP,aAAa,CAAE,IAAI,AACrB,CAAC;ACsEgB,UAAU,cAAC,CAAC,AAC7B,OAAO,CAAE,IAAI,AAAE,CAAC,AAElB,KAAK,cAAC,CAAC,AACL,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,AAAE,CAAC,AAElB,QAAQ,cAAC,CAAC,AACR,OAAO,CAAE,GAAG,AAAE,CAAC,AAEjB,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,CAAC,AAAE,CAAC,AAEf,cAAc,cAAC,CAAC,AACd,UAAU,CAAE,IAAI,AAAE,CAAC,AAErB,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CAAC,IAAI,AAAE,CAAC,AAEtB,yBAAW,CAAC,QAAQ,cAAC,CAAC,AACpB,OAAO,CAAE,CAAC,AAAE,CAAC,AAEf,aAAa,cAAC,CAAC,AACb,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,gBAAgB,CAAE,OAAO,CACzB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAClK,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,YAAY,cAAC,CAAC,AACZ,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,GAAG,AAAE,CAAC,AAExB,UAAU,cAAC,CAAC,AACV,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,AAAE,CAAC,AACjC,gBAAgB,cAAC,CAAC,AAChB,cAAc,CAAE,GAAG,CACnB,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,8BAAgB,CAAC,AAAQ,KAAK,AAAE,CAAC,AAC/B,cAAc,CAAE,IAAI,AAAE,CAAC,AAC3B,oBAAoB,cAAC,CAAC,AACpB,IAAI,CAAE,CAAC,AAAE,CAAC,AACZ,kBAAkB,cAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,QAAQ,CACzB,cAAc,CAAE,GAAG,CACnB,aAAa,CAAE,IAAI,CACnB,WAAW,CAAE,IAAI,AAAE,CAAC,AACpB,gCAAkB,OAAO,AAAC,CAAC,AACzB,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,CACd,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,AAAE,CAAC;AC/DN,gBAAgB,cAAC,CAAC,AACnC,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,eAAe,cAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CACpC,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AAAE,CAAC,AACtB,6BAAe,OAAO,AAAC,CAAC,AACtB,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,cAAc,CAAC,CACxB,IAAI,CAAE,IAAI,cAAc,CAAC,CACzB,KAAK,CAAE,IAAI,cAAc,CAAC,CAC1B,MAAM,CAAE,IAAI,cAAc,CAAC,CAC3B,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,gBAAgB,CAAE,gBAAgB,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,gBAAgB,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC9I,OAAO,CAAE,EAAE,AAAE,CAAC,AAChB,6BAAe,MAAM,AAAC,CAAC,AACrB,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACxC,gBAAgB,CAAE,gBAAgB,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAClE,OAAO,CAAE,EAAE,AAAE,CAAC,AAElB,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,IAAI,CACf,YAAY,CAAE,IAAI,AAAE,CAAC,AACrB,mBAAK,CAAC,IAAI,cAAC,CAAC,AACV,aAAa,CAAE,GAAG,AAAE,CAAC,AAEzB,WAAW,cAAC,CAAC,AACX,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,AAAE,CAAC,AAEhB,QAAQ,cAAC,CAAC,AACR,WAAW,CAAE,IAAI,AAAE,CAAC,AAEtB,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,IAAI,QAAQ,CAAC,CAC5B,gBAAgB,CAAE,OAAO,CACzB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAClK,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,IAAI,AAAE,CAAC;ACxJH,KAAK,eAAC,CAAC,AACxB,WAAW,CAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAC9C,OAAO,CAAE,IAAI,AAAE,CAAC,AAElB,MAAM,eAAC,CAAC,AACN,SAAS,CAAE,KAAK,CAChB,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,IAAI,AAAE,CAAC,AAElB,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,IAAI,CAAE,CAAC,AAAE,CAAC,AAEZ,UAAU,eAAC,CAAC,AACV,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AAAE,CAAC,AAExB,WAAW,eAAC,CAAC,AACX,cAAc,CAAE,MAAM,AAAE,CAAC,AACzB,0BAAW,CAAC,MAAM,eAAC,CAAC,AAClB,UAAU,CAAE,IAAI,AAAE,CAAC,AACrB,0BAAW,CAAC,MAAM,eAAC,CAAC,AAClB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,CAAC,AAAE,CAAC,AAErB,MAAM,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,AAAE,CAAC,AAEtB,CAAC,eAAC,CAAC,AACD,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AAAE,CAAC;ACpCjB,GAAG,eAAC,CAAC,AACD,WAAW,CAAE,SAAS,CACtB,KAAK,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACzB,CAAC"
}